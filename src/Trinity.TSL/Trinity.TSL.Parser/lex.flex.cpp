#line 2 "lex.flex.cpp"
#line 2 "lex.l"
//Fix the INT{X}_{MIN,MAX} redefinition warnings, and define flex types in our c++ style
//TODO platform
#define FLEXINT_H
#include <cstdint>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;



#line 17 "lex.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1137] =
    {   0,
       13,   13,   13,   13,   13,   13,   96,   94,   93,   93,
        9,   26,   10,   20,   21,   23,   94,   13,   24,   22,
       87,   25,   88,   94,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       18,   19,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   16,
       17,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   94,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,   94,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,   93,    9,    4,
        0,   10,    5,    0,    3,    2,   13,    0,   11,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,    7,    0,
        0,    3,    2,    7,    7,   11,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,    0,    0,    3,
        2,    8,    8,   11,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    9,   10,    3,    0,    2,   13,
        0,   11,   11,    6,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   46,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   65,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   45,   92,   92,
       92,   92,   92,   92,    3,    3,    7,    3,    2,    2,
        2,    7,    7,    7,   11,   11,    6,   11,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    3,    3,
        8,    3,    2,    2,    2,    8,    8,    8,   11,   11,
        6,   11,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    9,   10,    3,    1,   13,    0,   92,   92,
       48,   30,   92,   39,   73,   51,   50,   92,   89,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       44,   92,   47,   61,   59,   29,   62,   92,   92,   40,
       92,   49,   92,   92,   92,   80,   67,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   43,
       92,   66,   92,   92,   58,    3,    3,    1,    3,    7,
        7,    7,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        3,    3,    1,    3,    8,    8,    8,    6,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    3,   13,    0,   92,   90,
       92,   92,   92,   92,   92,   92,   36,   92,   92,   92,
       92,   92,   92,   92,   91,   92,   92,   69,   82,   84,
       86,   92,   92,   92,   35,   92,   92,   60,   92,   63,
       92,   92,   92,   92,   92,   92,   92,   79,   68,   92,
        3,    3,    3,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    3,    3,    3,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   13,    0,   92,   77,   78,   92,
       92,   38,   92,   92,   92,   92,   34,   57,   75,   28,
       92,   92,   70,   37,   92,   92,   92,   92,   33,   56,
       76,   27,   92,   81,   83,   85,   64,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,   13,    0,   92,   92,   14,   92,   92,
       52,   92,   92,   71,   92,   92,   53,   92,   92,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   13,    0,   92,   72,   41,   32,   54,   92,   42,

       31,   55,   74,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0,   13,   92,
        7,    7,    7,    8,    8,    8,    0,   92,    7,    7,
        8,    8,    0,   92,    7,    7,    8,    8,    0,   92,
        7,    7,    8,    8,    0,   92,    7,    7,    8,    8,
        0,   92,    7,    7,    8,    8,    0,   15,    7,    7,
        8,    8,    0,    7,    8,    0,    7,    8,    0,    7,
        8,    0,    7,    8,    0,    7,    8,    0,    7,    8,
        0,    7,    8,    0,    7,    8,    0,    7,    8,    0,

        7,    8,    0,    7,    8,    0,    7,    8,    0,    7,
        8,    0,    7,    8,    0,    7,    8,    0,    7,    8,
        0,    7,    8,    0,    7,    8,    0,    7,    8,    0,
        7,    8,   12,    7,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,    1,   11,   12,    1,   13,   14,   15,   16,
       17,   18,   14,   19,   14,   20,   14,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   28,
       32,   33,   34,   35,   35,   36,   37,   35,   38,   39,
       35,   40,   41,   42,   35,   35,   35,   35,   35,   35,
       43,   44,   45,    1,   35,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   35,   35,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   35,   66,
       67,   35,   68,    1,   69,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    4,    4,    1,
        5,    1,    1,    6,    6,    6,    6,    6,    6,    6,
        5,    5,    1,    1,    1,    1,    6,    6,    6,    6,
        6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    5,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5
    } ;

static yyconst flex_int16_t yy_base[1197] =
    {   0,
        0,    0,   69,    0,  138,    0, 3181, 6165,  206,  209,
      209, 6165,  208, 6165, 6165, 6165,  206,  206, 6165, 6165,
     6165, 6165, 6165, 3175,  240,  156,  177,  182,  172,  294,
      198,  173, 3115,  177,  178,  186,  171,  199,  265,  266,
     6165, 6165,  185,  290,  285,  303,  305,  308,  201,  262,
      273,  296,  275,  187,  286,  321,  253,  339,  314, 6165,
     6165,  393,  402,  408,  414,  420,  463,  440,  452,  495,
      501,  545,  222,  325,  330,  320,  599,  372,  316, 3114,
      325,  344,  367,  368,  370,  422,  454,    0,  377,  458,
      400,  413,  465,  462,  377,  326,  437,  470,  471,  387,

      423,  588,  465,  570,  473,  662,  668,  674,  717,  686,
      694,  706,  749,  793,  479,  581,  575,  481,  847,  640,
      412, 3113,  502,  575,  594,  472,  590,  676,  595,    0,
      561,  711,  633,  667,  698,  715,  651,  628,  610,  716,
      641,  718,  652,  836,  717,  818,  725,  783,  444, 6165,
        0,  613, 6165,    0, 3166,    0,  898,    0,  787,  905,
     3111,  740,  804, 3119, 3110, 3108,  815,  685,  678,  659,
      254,  821,  694,  823,  828,  840,  841,  827,  873,  867,
      846,  874,  881,  751, 3116,  882, 3122, 3105, 3104,  884,
      866,  895,  883,  900,  897,  886,  903,  904,  909,  908,

      913,  918,  898,  914,  922,  923,  927,  929,  992,  998,
      987, 1055, 1123, 1179,  996, 1229, 1285, 3103,  924,  925,
     3108, 3099, 3097,  953,  942,  955,  956,  959,  973,  961,
      969,  979,  965,  967,  981,  980,  976, 1044,  989,  997,
     1005, 1004, 3105, 1006, 3111, 3094, 3093, 1014, 1010, 1023,
     1018, 1030, 1017, 1025, 1031, 1037, 1041, 1026, 1042, 1028,
     1048, 1046, 1052, 1053, 1065, 1067, 1133, 1144, 1111, 1348,
     1416, 1472, 1143, 1522, 1578, 3092, 1078, 1086, 3100, 3091,
     3089, 1101, 1110, 1033, 1121, 1051, 1122, 1109, 1106, 1140,
     1114, 1120, 1119, 1147, 1123, 1210, 1155, 1154, 1177, 1126,

     3097, 1159, 3103, 3086, 3085, 1179, 1175, 1194, 1188, 1195,
     1183, 1191, 1160, 1189, 1199, 1203, 1201, 1207, 1211, 1079,
     1212, 1219, 1215, 1224, 1243, 1273, 3138, 3134,    0, 1275,
        0, 1281, 1303, 3141, 1629, 1263, 1254,  707,  738, 1264,
     1217, 1257, 1260, 1274, 1259, 3081, 1276, 1278, 3080, 1284,
     1261, 1310, 3077, 1282, 1297, 1299, 1308, 1307, 1304, 1311,
     1312, 3086, 1320, 1321, 1332, 1322, 1380, 1330, 3075, 1325,
     1324, 3074, 1339, 1338, 1340, 1319, 1358, 3073, 1364, 1343,
     1346, 1369, 1371, 1366, 1679,    0, 1747, 1429, 1815, 1883,
     3133, 1939, 1431, 1989, 2057, 2125, 1450, 1437, 2181, 1367,

     1379, 1401, 1408, 1406, 1414, 1429, 1405, 1411, 1410, 3071,
     1413, 1416, 3070, 1412, 1431, 1478, 3069, 1440, 1448, 1470,
     1449, 1450, 1485, 1453, 1446, 3077, 1489, 1481, 1492, 1482,
     1535, 1487, 3066, 1493, 1495, 3065, 1504, 1506, 1507, 1512,
     1510, 3063, 1498, 1514, 1516, 1518, 1451, 1536, 2231,    0,
     2299, 2367, 2435, 2503, 3113, 2571, 1596, 2621, 2689,    0,
     2754, 1583, 2805, 2859, 1573, 1576, 1571, 1577, 1535, 1593,
     1543, 1595, 1555, 1574, 1607, 1588, 1591, 1606,  220, 1641,
     3069, 1616, 1590, 3068, 1617, 1639, 1618, 1642, 1646, 3059,
     1557, 1647, 3066, 1650, 1652, 1656, 1653, 1658, 1664, 1665,

     1660, 1668, 1667, 1672, 1689, 3065, 1620, 1674, 1675, 1669,
     1670, 1695, 1720, 1727, 3100, 6165, 1758,    0, 2897, 1678,
     3045, 1447, 1698, 3044, 3043, 3042, 3041, 3040, 3039, 1691,
     1699, 1701, 1703, 1716, 1721, 1731, 1736, 1729, 1735, 1730,
     3033, 1734, 3032, 3031, 3030, 3029, 3028, 1732, 1742, 3018,
     1739, 3017, 1768, 1740, 1743, 3016, 3015, 1750, 1763, 1765,
     1744, 1760, 1767, 1778, 1780, 1749, 1787, 1777, 1790, 3014,
     1779, 1833, 1783, 1785, 3013, 2947, 3015, 1859, 1862, 3071,
     1859, 3121, 1904, 3177, 1803, 3012, 1775, 1827, 3011, 3010,
     3009, 3008, 3007, 3006, 1816, 1831, 1834, 1829, 1818, 1852,

     1849, 1854, 1855, 1853, 1791, 3005, 1856, 3004, 3003, 3002,
     3001, 3000, 1858, 1860, 2999, 1793, 2998, 1883, 1865, 1907,
     2997, 2993, 1866, 1873, 1874, 1869, 1885, 1876, 1896, 1900,
     1878, 1897, 1908, 1914, 2992, 1912, 1960, 1931, 1920, 2991,
     3227, 3295, 3049, 1994, 3351, 1998,    0,    0, 3389,  521,
     3007, 1973, 1956, 3006, 3005, 3004, 3003, 1899, 3002, 1953,
     1963, 1977, 1936, 1955, 1979, 1976, 3001, 1974, 1981, 1982,
     3000, 1984, 2999, 2998, 2997, 2996, 2995, 1992, 1994, 2994,
     1993, 2993, 1291, 1928, 2023, 2992, 2989, 1997, 1996, 2007,
     1999, 2000, 2009, 2024, 2025, 2017, 2988, 2026, 2036, 2987,

     2027, 2070, 2040, 2030, 2986, 3021, 2079,    0, 3427, 2966,
     2073, 2050, 2056, 2057, 2049, 2060, 2965, 2047, 2053, 1983,
     2059, 2067, 2070, 2075, 2964, 2089, 2090, 2963, 2960, 2959,
     2957, 2091, 2085, 2095, 2950, 2086, 2087, 2949, 2096, 2948,
     2100, 2109, 2099, 2111, 2126, 2102, 2094, 2947, 2946, 2108,
        0,    0, 2164, 3465, 2162, 3503, 2945, 2153, 2149, 2140,
     2141, 2128, 2158, 2944, 2122, 2150, 2154, 2160, 2173, 2124,
     2156, 2943, 2180, 2193, 2942, 2941, 2940, 2939, 2195, 2190,
     2198, 2938, 2159, 2191, 2937, 2197, 2936, 2200, 2199, 2186,
     2206, 2247, 2249, 2250, 2935, 2934, 2208,    0,    0, 2270,

     3541, 2267, 3579, 2951, 2247, 2243, 2242, 2031, 2221, 2244,
     2950, 2233, 2248, 2263, 2269, 2270, 2271, 2272, 2949, 2948,
     2273, 2947, 2943, 2942, 2941, 2280, 2281, 2283, 2940, 2286,
     2282, 2939, 2290, 2938, 2291, 2294, 2287, 2295, 2333, 2337,
     2327, 2937, 2936, 2314, 2376,    0, 3617, 2917, 2916, 2298,
     2316, 2915, 2317, 2297, 2293, 2320, 2914, 2913, 2912, 2911,
     2333, 2343, 2910, 2909, 2339, 2300, 2323, 2337, 2908, 2907,
     2906, 2903, 2345, 2902, 2901, 2900, 2899, 3655, 2399, 3693,
     2898, 2897, 2364, 2358, 2896, 2359, 2301, 2361, 2342, 2895,
     2892, 2891, 2889, 2362, 2366, 2878, 2877, 2381, 2383, 2368,

     2386, 2876, 2875, 2874, 2873, 2394, 2872, 2871, 2870, 2869,
     3731, 2445, 3769, 2886, 2885, 2420, 2403, 2884, 2883, 2409,
     2406, 2408, 2877, 2876, 2875, 2874, 2422, 2426, 2873, 2872,
     2858, 2425, 2427, 2429, 2857, 2856, 2855, 2854, 2428, 2846,
     2839, 2838, 2837, 2478,    0, 3807, 2436, 2818, 2454, 2458,
     2817, 2437, 1370, 2816, 2462, 2464, 2786, 2438, 2463, 3845,
     2515, 3883, 2473, 2784, 2481, 2485, 2763, 2488, 2475, 2762,
     2486, 2487, 2752, 2493, 2492, 3921, 2544, 3959, 2519, 2768,
     2522, 2524, 2767, 2534, 2436, 2753, 2537, 2548, 2752, 2547,
     2558, 2619, 2785, 1571, 2732, 2731, 2723, 2716, 2503, 2715,

     2714, 2713, 2712, 3999, 2630, 2542, 2711, 2703, 2702, 2701,
     2531, 2700, 2699, 2698, 2697, 4039, 2637, 2509, 2714, 2710,
     2709, 2708, 2559, 2707, 2699, 2690, 2685,    0, 2653, 2370,
     4077, 2718, 2544, 4115, 2717, 2550,    0, 2548, 4153, 2577,
     4191, 2612,    0, 2620, 4229, 2622, 4267, 2631,    0, 2623,
     4305, 2624, 4343, 2570, 2716, 2631, 2687, 2656, 2707, 2663,
        0, 2597, 4381, 2598, 4419, 2520,    0, 2654, 4457, 2653,
     4495, 2670,    0, 4533, 4571,    0, 4609, 4647, 2702, 2723,
     2732,    0, 4685, 4723,    0, 4761, 4799,    0, 4837, 4875,
        0, 4913, 4951, 2701, 2774, 2879,    0, 4989, 5027,    0,

     5065, 5103,    0, 5141, 5179,    0, 5217, 5255,    0, 5293,
     5331,    0, 5369, 5407,    0, 5445, 5483,    0, 5521, 5559,
        0, 5597, 5635,    0, 5673, 5711,    0, 5749, 5787,    0,
     5825, 5863, 6165, 5901, 5939, 6165, 5990, 5996, 2706, 6002,
     6008, 6014, 6020, 6026, 6032, 6038, 6044, 2676, 6050, 6056,
     6062, 6068, 6074, 6080, 6086, 6092, 6098, 6104, 2673, 6110,
     6116, 6122, 6128, 6134, 6140, 6146, 2672, 6152, 6158, 2657,
     2608, 2514, 2493, 2478, 2292, 2263, 2146, 2000, 1933, 1783,
     1730, 1534, 1477, 1276, 1197, 1048,  900,  830,  769,  674,
      638,  538,  454,  422,  393,  343

    } ;

static yyconst flex_int16_t yy_def[1197] =
    {   0,
     1136,    1, 1136,    3, 1136,    5, 1136, 1136, 1136, 1136,
     1137, 1136, 1138, 1136, 1136, 1136, 1136, 1139, 1136, 1136,
     1136, 1136, 1136, 1136, 1136,   25,   25,   25,   25,   25,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
     1136, 1136,   25,   25,   25,   25,   25,   25,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30, 1136,
     1136, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1136,   72,   72,   72,   72,   72,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77, 1141,   72,   72,
       72,   72,   72,   72,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1136,  114,  114,  114,  114,  114,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119, 1143,
      114,  114,  114,  114,  114,  114,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119, 1136, 1137, 1136,
     1144, 1138, 1136, 1145, 1146, 1147, 1148, 1148, 1149,   30,
       30,   30,   30,  160,  160,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  160,   30,  160,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30, 1140, 1140,
     1140, 1150, 1151,   67,  214, 1152,   77,   77,   77,   77,
      217,  217,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77, 1140,   77,   77,
       77,   77,  217,   77,  217,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77, 1142, 1142, 1142, 1153,
     1154,  109,  272, 1155,  119,  119,  119,  119,  275,  275,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119, 1142,  119,  119,  119,  119,

      275,  119,  275,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119, 1156, 1157, 1146, 1158, 1147, 1159,
     1159, 1149, 1149, 1136,  160,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  335,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30, 1150,  385, 1160, 1150, 1151, 1151,
     1151,  214,  392, 1152, 1152, 1152, 1140, 1152,  217,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  399,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77, 1153,  449,
     1161,  449, 1162, 1162, 1162, 1142,  456, 1163, 1163,  459,
      456, 1163, 1136,  463,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  463,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464, 1164, 1165, 1166, 1136, 1167, 1167,  335,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30, 1168, 1168, 1140, 1168,  392,
      580, 1152, 1140,  399,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
     1169, 1169,  461, 1169,  456,  645,  459,  461,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464, 1166, 1170, 1170,  335,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      577,  577, 1168,  580,  754,  399,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  642,  642, 1169,

      645,  801,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464, 1171, 1171,  335,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  754,  878,  399,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      801,  911,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464, 1172, 1172,  335,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  878,
      960,  399,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  911,  976,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464, 1136, 1136,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  960, 1004,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  976, 1016,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464, 1173, 1136,   30,
      960, 1004,   77,  976, 1016,  464, 1174,   30,  960,   77,
      976,  464, 1175,   30,  960,   77,  976,  464, 1176,   30,
      960,   77,  976,  464, 1136,   30, 1004,   77, 1016,  464,
     1177,   30,  960,   77,  976,  464, 1178,   30,  960,   77,
      976,  464, 1179,  960,  976, 1180,  960,  976, 1136, 1004,
     1016, 1181,  960,  976, 1182,  960,  976, 1183,  960,  976,
     1184,  960,  976, 1136, 1004, 1016, 1185,  960,  976, 1186,

      960,  976, 1187,  960,  976, 1188,  960,  976, 1189,  960,
      976, 1190,  960,  976, 1191,  960,  976, 1192,  960,  976,
     1193,  960,  976, 1194,  960,  976, 1195,  960,  976, 1196,
      960,  976, 1136,  960,  976,    0, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136

    } ;

static yyconst flex_int16_t yy_nxt[6235] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,    8,
       16,    8,   17,   18,   18,   18,   18,   18,   18,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,    8,   42,   43,   44,   45,   46,   47,
       48,   33,   49,   50,   51,   52,   33,   53,   54,   33,
       55,   56,   57,   58,   59,   33,   33,   60,   61,   62,
        9,   10,    9,   11,   63,   13,   64,   65,   62,   16,
       62,   66,   67,   67,   67,   67,   67,   67,   67,   19,
       20,   68,   69,   70,   71,   72,   73,   74,   75,   76,

       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   41,   88,   42,   89,   90,   91,   92,   93,   94,
       80,   95,   96,   97,   98,   80,   99,  100,   80,  101,
      102,  103,  104,  105,   80,   80,   60,   61,  106,    9,
       10,    9,   11,  107,   13,   14,   15,  106,   16,  106,
      108,  109,  109,  109,  109,  109,  109,  109,   19,   20,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
       41,  130,   42,  131,  132,  133,  134,  135,  136,  122,
      137,  138,  139,  140,  122,  141,  142,  122,  143,  144,

      145,  146,  147,  122,  122,   60,   61,  148,  148,  148,
      148,  148,  148,  150,  153,  155,  161,  161,  156,  157,
      157,  157,  157,  157,  157,  157,  164,  165,  166,  170,
      171,  174,  161,  161,  161,  172,  161,  161,  161,  168,
      161,  161,  161,  161,  173,  181,  182,  196,  175,  161,
      161,  154,  151,  160,  160,  160,  160,  160,  160,  160,
      169,  161,  161,  191,  161,  276,  160,  160,  160,  160,
      160,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  218,  218,  666,  160,  160,  160,  160,  160,
      160,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      162,  163,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  176,  345,  161,  161,  192,  203,
      161,  161,  161,  161,  161,  161,  179,  177,  161,  161,
      193,  178,  180,  195,  185,  197,  161,  186,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  183, 1133,  161,
      161,  161,  187,  194,  161,  161,  184,  167,  204,  161,
      188,  189,  190,  161,  161,  161,  161,  198,  161,  161,
      199,  208,  227,  200,  221,  222,  223,  161,  228,  218,
      218,  218,  250,  201,  161,  218,  218,  202,  218,  218,
      218,  218,  205,  206,  210,  210,  210,  210, 1130,  210,

      207,  229,  161,  210,  210,  210,  210,  218,  210,  210,
      210,  210,  210,  225,  210,  210,  210,  210,  210,  232,
      210,  210,  210,  210,  210,  230,  210, 1127,  231,  212,
      218,  218,  213,  218,  226,  218,  211,  239,  240,  249,
      218,  210,  210,  210,  210,  211,  210,  254,  150,  243,
      218,  211,  244,  210,  210,  210,  210,  211,  210, 1124,
      218,  218,  245,  211,  210,  210,  210,  210,  285,  210,
      246,  233,  255,  218,  218,  276,  214,  214,  214,  214,
      214,  214,  214,  211,  234,  218,  218,  151,  235,  215,
      215,  215,  215,  215,  251,  211,  210,  210,  210,  210,

      218,  210,  210,  210,  210,  216,  211,  210,  215,  215,
      215,  215,  215,  215,  236,  241,  248,  218,  218,  218,
      237,  247,  218,  218,  242,  218,  218,  252,  218,  253,
      266,  261,  289,  218,  218,  276,  218,  281,  211,  276,
      276,  276,  276, 1121,  211,  209,  210,  210,  210,  210,
      209,  210,  209,  209,  209,  286,  209,  209,  217,  217,
      217,  217,  217,  217,  217,  276,  276,  209,  209,  209,
      209,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  804,  211,  262,
      217,  217,  217,  217,  217,  217,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  219,  220,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  153,
      280,  297,  298,  263,  264,  218,  218,  218,  218,  218,
      279,  265,  287,  218,  256,  276,  276,  257,  276,  290,
      258,  276,  276, 1118,  218,  218,  218,  218,  218,  218,
      259,  218,  288,  276,  260,  294,  154,  276,  276,  218,
      218,  295,  224,  268,  268,  268,  268,  309,  268,  268,
      268,  268,  268,  276,  268,  268,  268,  268,  268, 1115,
      268,  283,  301,  270,  308,  302,  271,  268,  268,  268,
      268,  276,  268,  276,  276,  268,  268,  268,  268,  311,

      268,  313,  284,  276,  276,  269,  344,  268,  268,  268,
      268,  269,  268,  307,  276,  276,  303,  269,  268,  268,
      268,  268,  161,  268,  304,  291,  342,  276,  276,  269,
      272,  272,  272,  272,  272,  272,  272,  269,  292,  276,
      343,  161,  293,  273,  273,  273,  273,  273,  161,  269,
      268,  268,  268,  274,  305,  268,  347,  161,  276,  276,
      269,  522,  273,  273,  273,  273,  273,  273,  299,  306,
      161,  276,  276,  310, 1112,  276,  276,  300,  312,  276,
      276,  276,  324,  319,  148,  148,  148,  523,  276,  333,
      333,  334,  269,  267,  268,  268,  268,  268,  267,  268,

      336,  161,  267,  161,  267,  267,  275,  275,  275,  275,
      275,  275,  275,  359,  161,  267,  267,  267,  267,  275,
      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276, 1109,  269,  320,  275,  275,
      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  277,  278,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  161,  341,  346,
      337,  321,  322,  276,  276,  276,  276,  276,  161,  323,
      348,  276,  314,  353,  161,  315,  161,  349,  316,  350,
      161,  161,  276,  276,  276,  276,  276,  276,  317,  276,

      351,  352,  318,  161,  161, 1106,  356,  276,  276,  161,
      282,  330,  330,  330,  330,  330,  330,  330,  335,  335,
      335,  335,  335,  335,  335,  355,  354,  361,  366,  161,
      161,  335,  335,  335,  335,  335,  161,  161,  358,  368,
      357,  365,  344,  371,  161,  161,  161,  161,  369,  161,
      335,  335,  335,  335,  335,  335,  379,  367,  161,  370,
      161,  161,  372,  161,  373,  376,  161,  161,  161,  375,
      374,  161,  161,  377,  378,  380,  161,  161,  381,  383,
      382,  161,  384,  406,  400,  161,  161,  218,  218, 1136,
      161,  401,  161,  210,  210,  210,  210,  209,  210,  210,

      210,  210,  210,  408,  210,  218,  405,  209,  209,  393,
      393,  393,  393,  393,  393,  393,  218,  407,  218,  218,
      409,  410,  218,  411,  218,  415,  412,  416,  218,  209,
      218,  209,  218,  418,  419,  211,  218,  417,  413,  218,
      414,  211,  218,  218,  218,  210,  210,  210,  210,  420,
      210,  425,  218, 1103,  209,  209,  386,  386,  386,  386,
      218,  386,  422,  421,  387,  327,  423,  218,  218,  218,
      408,  429,  430,  218,  432,  327,  327,  218,  433,  434,
      218,  218,  435,  440,  442,  431,  218,  211,  218,  218,
      436,  218,  437,  218,  218,  471,  276,  327,  388,  327,

      218,  439,  441,  438,  218,  218,  443,  444,  445,  218,
      446,  218,  473, 1136,  276,  218,  218,  447,  267,  267,
      448,  267,  327,  327,  390,  210,  390,  390,  218,  390,
      218,  267,  267,  329,  268,  268,  268,  268,  464,  268,
      508,  276,  276,  329,  329,  268,  268,  268,  268,  276,
      268,  470,  465,  267,  469,  267,  457,  457,  457,  457,
      457,  457,  457,  476,  276,  329,  391,  329,  472,  276,
      474,  475,  276,  276,  479,  481,  269,  276,  267,  267,
      480,  483,  276,  276,  276,  276,  276,  269,  487,  276,
      329,  329,  392,  392,  392,  392,  392,  392,  392,  477,

      482,  478, 1100,  276,  489,  393,  393,  393,  393,  393,
      276,  268,  268,  268,  268,  484,  268,  276,  276,  500,
      485,  501,  276,  276,  393,  393,  393,  393,  393,  393,
      395,  396,  396,  397,  486,  395,  493,  494,  276,  332,
      276,  472,  276,  497,  496,  498,  276,  150,  499,  332,
      332,  276,  276,  269,  276,  502,  495,  276,  276,  503,
      504,  505,  276,  506,  276,  525,  276,  511,  509,  507,
      276,  332,  398,  332,  276,  276,  510,  512,  276,  153,
      161, 1094,  276,  333,  333,  334,  151,  276,  517,  517,
      517,  517,  517,  517,  517,  526,  332,  332,  399,  399,

      399,  399,  399,  399,  399,  333,  333,  334,  520,  823,
      521,  399,  399,  399,  399,  399,  154,  161,  527,  524,
      161,  529,  161,  161,  161,  536,  161,  161,  528,  531,
      399,  399,  399,  399,  399,  399,  276,  161,  540,  161,
      532,  161,  535,  533,  542,  161,  541,  161,  218,  450,
      450,  450,  450,  545,  450,  327,  327,  451,  327,  537,
      161,  544,  161,  538,  543,  546,  549,  161,  327,  327,
      161,  161,  547,  539,  161,  161,  550,  551,  559,  566,
      552,  557,  161,  161,  161,  161,  560,  161,  161,  561,
      327,  452,  327,  161,  553,  161,  554,  563,  555,  556,

      564,  161,  161,  161,  565,  571,  161,  567,  572,  161,
      999,  568,  585,  570,  575,  327,  327,  454,  268,  454,
      454,  569,  454,  329,  329,  573,  329,  161,  574,  161,
      218,  327,  161,  161,  161,  586,  329,  329,  387,  333,
      582,  583,  218,  161,  581,  581,  581,  581,  581,  581,
      581,  210,  210,  210,  395,  587,  210,  588,  329,  455,
      329,  589,  590,  592,  218,  593,  596,  591,  218,  218,
      600,  218,  594,  218,  218,  218,  218,  218,  597,  218,
      711,  598, 1091,  329,  329,  456,  456,  456,  456,  456,
      456,  456,  218,  211,  218,  601,  605,  606,  457,  457,

      457,  457,  457,  218,  609,  608,  612,  611,  639,  218,
      161,  218,  218,  218,  218,  607,  218,  457,  457,  457,
      457,  457,  457,  459,  460,  460,  461,  602,  459,  332,
      332,  603,  332,  218,  610,  614,  615,  616,  622, 1088,
      617,  604,  332,  332,  218,  218,  624,  635,  218,  618,
      218,  619,  218,  620,  621,  218,  218,  625,  218,  632,
      626,  218,  628,  633,  332,  462,  332,  218,  629,  218,
      218,  630,  631,  634,  638,  218,  636,  218,  637,  218,
      276,  218, 1028,  655,  640,  333,  647,  648,  276,  332,
      332,  463,  463,  463,  463,  463,  463,  463,  218,  218,

      276,  657,  276,  679,  463,  463,  463,  463,  463,  646,
      646,  646,  646,  646,  646,  646,  276,  659,  276,  276,
      653,  276,  276,  463,  463,  463,  463,  463,  463,  651,
      652,  656,  654,  276,  161,  276,  276,  660,  276,  671,
      276,  276,  519,  519,  519,  519,  519,  519,  519,  658,
      662,  276,  276,  663,  664,  519,  519,  519,  519,  519,
      661,  276,  276,  276,  665,  276,  683,  675,  684,  700,
      685,  686,  670,  673,  519,  519,  519,  519,  519,  519,
      386,  386,  386,  386,  276,  386,  276,  276,  387,  327,
      667,  276,  276,  674,  668,  276,  676,  276,  276,  327,

      327,  276,  680,  276,  669,  276,  677,  687,  682,  276,
      276,  689,  276,  276,  276,  276,  688,  276,  693,  276,
      276,  327,  388,  327,  150,  703,  690,  704,  692,  691,
      694,  695,  696,  153,  276, 1085,  701,  702,  697,  712,
      276,  161,  698,  705,  710,  714,  327,  327,  577,  577,
      577,  577,  699,  577,  161,  730,  715,  515,  716,  578,
      731,  161,  161,  151,  161,  718,  161,  515,  515,  717,
      154,  707,  707,  707,  707,  707,  707,  707,  719,  161,
      720,  721,  723,  724,  161,  722,  729,  726, 1079,  515,
      579,  515,  161,  161,  161,  161,  727,  161,  161,  161,

      725,  728,  161,  161,  732,  161,  161,  161,  758,  736,
      735,  740,  161,  161,  515,  515,  390,  210,  390,  390,
      733,  390,  734,  161,  737,  329,  161,  738,  161,  739,
      161,  161,  741,  742,  749,  329,  329,  743,  218,  744,
      161,  161,  161,  161,  771,  750,  161,  745,  161,  746,
      161,  747,  748,  161,  218,  775,  218,  329,  391,  329,
      210,  210,  210,  210,  706,  210,  218,  765,  759,  757,
      761,  387,  755,  755,  755,  755,  755,  755,  755,  218,
      777,  218,  329,  329,  390,  210,  390,  390,  762,  390,
      218,  763,  218,  329,  218,  764,  161,  218,  767,  768,

      770,  776,  211,  329,  329,  210,  210,  210,  395,  766,
      210,  769,  218,  773,  774,  218,  218,  218,  218,  218,
      779,  218,  772,  218,  778,  329,  391,  329,  218,  218,
      780,  781,  218,  784,  783,  782,  218,  218, 1076,  218,
      787,  218,  788,  824,  276,  785,  218,  211,  218,  786,
      329,  329,  580,  580,  580,  580,  580,  580,  580,  218,
      218,  790,  807,  218,  789,  581,  581,  581,  581,  581,
      218,  218,  791,  276,  792,  218,  793,  218,  794,  795,
      797,  276,  796,  218,  581,  581,  581,  581,  581,  581,
      395,  396,  396,  397,  218,  395,  706,  806,  276,  332,

      276,  276,  811,  451,  812, 1073,  805,  808,  276,  332,
      332,  802,  802,  802,  802,  802,  802,  802,  276,  276,
      809,  276,  276,  218,  276,  814,  276,  276,  817,  276,
      816,  332,  398,  332,  810,  818,  813,  276,  276,  276,
      825,  276,  276,  857,  276,  276,  161,  820,  821,  830,
      819,  826,  276,  827,  276,  822,  332,  332,  395,  396,
      396,  397,  276,  395,  828,  829,  831,  332,  276,  276,
      276,  276,  276,  832,  833,  276,  276,  332,  332,  834,
      918,  276,  836,  837,  839,  276,  840,  838,  841,  842,
      844,  843,  845,  845,  845,  845,  845,  845,  845,  332,

      398,  332,  848,  850,  851,  853,  852,  854,  855,  856,
      161,  876,  161,  161,  858,  276,  161,  875,  859,  161,
      161,  849,  161,  161,  332,  332,  395,  396,  396,  397,
      161,  395,  860,  161,  862,  332,  161,  861,  161,  863,
      864,  865,  866,  868,  874,  332,  332,  867,  161,  161,
      161, 1067,  161,  161,  161,  870,  869,  161,  161,  161,
      871,  872,  161,  161,  873,  161,  706,  332,  398,  332,
      877,  161,  161,  387,  161,  879,  879,  879,  879,  879,
      879,  879,  881,  888,  886,  218,  893,  218,  884,  161,
      885,  218,  332,  332,  584,  584,  584,  584,  584,  584,

      584,  882,  883,  218,  218,  887,  889,  584,  584,  584,
      584,  584,  218,  218,  890,  891,  218,  218,  894,  218,
      900,  218,  218,  218,  892,  895,  584,  584,  584,  584,
      584,  584,  450,  450,  450,  450,  218,  450,  327,  327,
      451,  327,  896,  218,  897,  899,  898,  901,  905,  218,
      904,  327,  327,  218,  218,  903,  218,  902,  218,  906,
      218,  218,  218,  218,  908,  907,  276,  909, 1055,  218,
      910,  218,  706,  327,  452,  327,  914,  919,  276,  451,
      912,  912,  912,  912,  912,  912,  912,  276,  276,  276,
      917,  920,  276,  276,  921,  915,  916, 1049,  327,  327,

      642,  642,  642,  642,  922,  642,  515,  515,  276,  515,
      218,  643,  218,  218,  276,  276,  276,  276,  276,  515,
      515,  925,  929,  923,  924,  276,  276,  276,  276,  930,
      932,  276,  276,  926,  927,  276,  276,  931,  934,  276,
      276,  515,  644,  515,  942,  937,  936,  933,  939,  938,
      935,  940,  941,  947,  950,  951,  161,  956,  966,  276,
      161,  161,  949,  161,  218,  948,  515,  515,  449,  327,
      449,  449,  276,  449,  449,  449,  943,  449,  276,  161,
      161,  952,  276,  161,  955,  957,  161,  449,  449,  944,
      944,  944,  944,  944,  944,  944,  161,  954,  958,  953,

      161,  959,  161,  968,  965,  218,  161,  964,  161,  449,
      449,  449,  961,  961,  961,  961,  961,  961,  961,  963,
      970,  218,  218,  967,  218,  218,  971,  218,  969,  218,
      973,  218, 1038,  161,  449,  449,  454,  268,  454,  454,
      972,  454,  329,  329,  218,  329,  218,  974,  276,  218,
      975,  276,  980,  276,  276,  329,  329,  218,  977,  977,
      977,  977,  977,  977,  977,  276,  982,  276,  983,  984,
      276,  276,  276,  276,  276,  979, 1023,  329,  455,  329,
      986,  276,  988, 1043,  991,  995,  998, 1002,  985,  989,
      990,  992,  992,  992,  992,  992,  992,  992, 1037,  161,

      161,  161,  329,  329,  454,  268,  454,  454,  996,  454,
      329,  329,  997,  329, 1003, 1011, 1000,  161, 1001,  993,
     1034,  161, 1007,  329,  329,  161,  161,  161, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1008,  218, 1010,  218, 1009,
     1012, 1013, 1014, 1015,  218,  329,  455,  329,  218,  218,
      218,  218, 1030, 1031,  276,  218,  218, 1017, 1017, 1017,
     1017, 1017, 1017, 1017,  276,  276,  161,  276, 1019,  276,
      329,  329,  268,  268,  268,  268, 1020,  268, 1021,  276,
     1033, 1072,  276, 1022,  645,  645,  645,  645,  645,  645,
      645, 1024,  276,  276,  218,  276, 1026,  646,  646,  646,

      646,  646, 1025,  276,  276,  218, 1040,  218, 1036, 1027,
     1044,  161, 1042,  945,  269,  276,  646,  646,  646,  646,
      646,  646,  459,  460,  460,  461, 1060,  459,  332,  332,
     1028,  332, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1046,
      218,  332,  332,  209,  209,  209,  209,  209,  209,  209,
      267,  267,  267,  267,  267,  267,  267,  276, 1068, 1070,
      161,  218,  846,  332,  462,  332, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1050, 1048, 1052,  276,  708,  518, 1056,
     1058,  331, 1062,  161, 1054,  218,  161,  218,  332,  332,
      459,  460,  460,  461,  161,  459,  332,  332, 1063,  332,

      209,  209,  209,  209,  209,  209,  209, 1064,  276,  332,
      332,  158, 1097, 1082, 1066,  276,  218,  161, 1065,  218,
      267,  267,  267,  267,  267,  267,  267, 1061,  267,  209,
      276,  332,  462,  332, 1083,  276,  209,  209,  209,  209,
      209,  209,  209, 1084,  276,  267,  267,  267,  267,  267,
      267,  267,  276,  276,  276,  276,  332,  332,  459,  276,
      218,  218,  218,  218,  218,  218,  218,  267,  267,  267,
      267,  267,  267,  267,  218,  161,  161,  161,  161,  161,
      267,  267,  267,  267,  267, 1098,  161,  209,  209,  209,
      209,  209,  209,  209,  161,  161, 1028,  276,  276,  267,

      267,  267,  267,  267,  267,  267,  268,  268,  268,  268,
      267,  268,  276,  276,  267,  218,  267,  267,  649,  649,
      649,  649,  649,  649,  649,  218,  218,  267,  267,  267,
      267,  649,  649,  649,  649,  649,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  218,  269,  161,
      649,  649,  649,  649,  649,  649,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  161,
      161,  161,  276,  276,  276,  276,  276,  276,  276,  276,
     1099,  276,  267,  267,  267,  267,  267,  267,  267,  276,

      276,  276,  276,  987,  650,  276,  276,  276,  276,  276,
      709,  709,  709,  709,  709,  709,  709,  276,  276,  276,
      276,  276,  276,  709,  709,  709,  709,  709,  981,  276,
      276,  276,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  709,  709,  709,  709,  709,  709,  752,  752,
      752,  752,  218,  752,  218,  218,  387,  706,  218,  218,
      218,  218,  161,  161,  161,  161,  161,  706,  706,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  276,  276,  276,  276,  276,  276,  276,  276,  706,
      753,  706,  276,  928,  276,  276,  276,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  161,
      161,  161,  161,  161,  706,  706,  752,  752,  752,  752,
      161,  752,  161,  161,  387,  706,  161,  161,  161,  161,
      328,  276,  276,  835,  276,  706,  706,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  815,  276,  276,  276,
      276,  276,  276,  268,  218,  218,  218,  706,  753,  706,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      760,  218,  218,  218,  218,  218,  161,  161,  161,  161,
      161,  161,  706,  706,  754,  754,  754,  754,  754,  754,
      754,  161,  161,  161,  161,  161,  161,  755,  755,  755,

      755,  755,  161,  713,  161,  161,  161,  161,  161,  328,
      276,  681,  678,  672,  276, 1136,  755,  755,  755,  755,
      755,  755,  395,  396,  396,  397,  218,  395,  627,  623,
      613,  332,  218,  599,  595, 1136,  161,  562,  558,  548,
      161,  332,  332,  534,  530,  332,  516,  328,  492,  491,
      490,  488,  468,  467,  466,  276,  428,  427,  426,  424,
      404,  403,  402,  332,  398,  332,  218,  364,  363,  362,
      360,  340,  339,  338,  161,  328,  276,  218,  161,  159,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  332,  332,
      756,  756,  756,  756,  756,  756,  756, 1136, 1136, 1136,

     1136, 1136, 1136,  756,  756,  756,  756,  756, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  756,  756,  756,  756,  756,  756,  799,  799,
      799,  799, 1136,  799,  706,  706,  451,  706, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136,  706,  706, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  706,
      800,  706, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  706,  706,  799,  799,  799,  799,

     1136,  799,  706,  706,  451,  706, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136,  706,  706, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136,  706,  800,  706,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  706,  706,  801,  801,  801,  801,  801,  801,
      801, 1136, 1136, 1136, 1136, 1136, 1136,  802,  802,  802,
      802,  802, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  802,  802,  802,  802,

      802,  802,  803,  803,  803,  803,  803,  803,  803, 1136,
     1136, 1136, 1136, 1136, 1136,  803,  803,  803,  803,  803,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  803,  803,  803,  803,  803,  803,
      847,  847,  847,  847,  847,  847,  847, 1136, 1136, 1136,
     1136, 1136, 1136,  847,  847,  847,  847,  847, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  847,  847,  847,  847,  847,  847,  878,  878,
      878,  878,  878,  878,  878, 1136, 1136, 1136, 1136, 1136,
     1136,  879,  879,  879,  879,  879, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      879,  879,  879,  879,  879,  879,  880,  880,  880,  880,
      880,  880,  880, 1136, 1136, 1136, 1136, 1136, 1136,  880,
      880,  880,  880,  880, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  880,  880,
      880,  880,  880,  880,  911,  911,  911,  911,  911,  911,
      911, 1136, 1136, 1136, 1136, 1136, 1136,  912,  912,  912,
      912,  912, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  912,  912,  912,  912,
      912,  912,  913,  913,  913,  913,  913,  913,  913, 1136,

     1136, 1136, 1136, 1136, 1136,  913,  913,  913,  913,  913,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  913,  913,  913,  913,  913,  913,
      946,  946,  946,  946,  946,  946,  946, 1136, 1136, 1136,
     1136, 1136, 1136,  946,  946,  946,  946,  946, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  946,  946,  946,  946,  946,  946,  960,  960,
      960,  960,  960,  960,  960, 1136, 1136, 1136, 1136, 1136,
     1136,  961,  961,  961,  961,  961, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

      961,  961,  961,  961,  961,  961,  962,  962,  962,  962,
      962,  962,  962, 1136, 1136, 1136, 1136, 1136, 1136,  962,
      962,  962,  962,  962, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,  962,  962,
      962,  962,  962,  962,  976,  976,  976,  976,  976,  976,
      976, 1136, 1136, 1136, 1136, 1136, 1136,  977,  977,  977,
      977,  977, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  977,  977,  977,  977,
      977,  977,  978,  978,  978,  978,  978,  978,  978, 1136,
     1136, 1136, 1136, 1136, 1136,  978,  978,  978,  978,  978,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  978,  978,  978,  978,  978,  978,
      994,  994,  994,  994,  994,  994,  994, 1136, 1136, 1136,
     1136, 1136, 1136,  994,  994,  994,  994,  994, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,  994,  994,  994,  994,  994,  994, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1136, 1136, 1136, 1136, 1136,
     1136, 1005, 1005, 1005, 1005, 1005, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1136, 1136, 1136, 1136, 1136, 1136, 1006,
     1006, 1006, 1006, 1006, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1006, 1006,
     1006, 1006, 1006, 1006, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1136, 1136, 1136, 1136, 1136, 1136, 1017, 1017, 1017,
     1017, 1017, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1017, 1017, 1017, 1017,
     1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1136,
     1136, 1136, 1136, 1136, 1136, 1018, 1018, 1018, 1018, 1018,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1018, 1018, 1018, 1018, 1018, 1018,
     1031, 1136, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1136,
     1136, 1136, 1136, 1136, 1136,  209,  209,  209,  209,  209,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  209,  209,  209,  209,  209,  209,
     1034, 1136, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1136,
     1136, 1136, 1136, 1136, 1136,  267,  267,  267,  267,  267,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  267,  267,  267,  267,  267,  267,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1136, 1136, 1136,

     1136, 1136, 1136, 1039, 1039, 1039, 1039, 1039, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1039, 1039, 1039, 1039, 1039, 1039, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1136, 1136, 1136, 1136, 1136,
     1136, 1041, 1041, 1041, 1041, 1041, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1041, 1041, 1041, 1041, 1041, 1041, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1136, 1136, 1136, 1136, 1136, 1136, 1045,
     1045, 1045, 1045, 1045, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1045, 1045,

     1045, 1045, 1045, 1045, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1136, 1136, 1136, 1136, 1136, 1136, 1047, 1047, 1047,
     1047, 1047, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1047, 1047, 1047, 1047,
     1047, 1047, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1136,
     1136, 1136, 1136, 1136, 1136, 1051, 1051, 1051, 1051, 1051,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1051, 1051, 1051, 1051, 1051, 1051,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1136, 1136, 1136,
     1136, 1136, 1136, 1053, 1053, 1053, 1053, 1053, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1053, 1053, 1053, 1053, 1053, 1053, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1136, 1136, 1136, 1136, 1136,
     1136, 1057, 1057, 1057, 1057, 1057, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1057, 1057, 1057, 1057, 1057, 1057, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1136, 1136, 1136, 1136, 1136, 1136, 1059,
     1059, 1059, 1059, 1059, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1059, 1059,
     1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069,

     1069, 1136, 1136, 1136, 1136, 1136, 1136, 1069, 1069, 1069,
     1069, 1069, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1069, 1069, 1069, 1069,
     1069, 1069, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1136,
     1136, 1136, 1136, 1136, 1136, 1071, 1071, 1071, 1071, 1071,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1071, 1071, 1071, 1071, 1071, 1071,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1136, 1136, 1136,
     1136, 1136, 1136, 1074, 1074, 1074, 1074, 1074, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1136, 1136, 1136, 1136, 1136,
     1136, 1075, 1075, 1075, 1075, 1075, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1075, 1075, 1075, 1075, 1075, 1075, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1136, 1136, 1136, 1136, 1136, 1136, 1077,
     1077, 1077, 1077, 1077, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1077, 1077,
     1077, 1077, 1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1136, 1136, 1136, 1136, 1136, 1136, 1078, 1078, 1078,

     1078, 1078, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1078, 1078, 1078, 1078,
     1078, 1078, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1136,
     1136, 1136, 1136, 1136, 1136, 1080, 1080, 1080, 1080, 1080,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1080, 1080, 1080, 1080, 1080, 1080,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1136, 1136, 1136,
     1136, 1136, 1136, 1081, 1081, 1081, 1081, 1081, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1081, 1081, 1081, 1081, 1081, 1081, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1136, 1136, 1136, 1136, 1136,
     1136, 1086, 1086, 1086, 1086, 1086, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1086, 1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1136, 1136, 1136, 1136, 1136, 1136, 1087,
     1087, 1087, 1087, 1087, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1087, 1087,
     1087, 1087, 1087, 1087, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1136, 1136, 1136, 1136, 1136, 1136, 1089, 1089, 1089,
     1089, 1089, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1089, 1089, 1089, 1089,
     1089, 1089, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1136,
     1136, 1136, 1136, 1136, 1136, 1090, 1090, 1090, 1090, 1090,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1090, 1090, 1090, 1090, 1090, 1090,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1136, 1136, 1136,
     1136, 1136, 1136, 1092, 1092, 1092, 1092, 1092, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1092, 1092, 1092, 1092, 1092, 1092, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1136, 1136, 1136, 1136, 1136,

     1136, 1093, 1093, 1093, 1093, 1093, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1093, 1093, 1093, 1093, 1093, 1093, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1136, 1136, 1136, 1136, 1136, 1136, 1095,
     1095, 1095, 1095, 1095, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1095, 1095,
     1095, 1095, 1095, 1095, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1136, 1136, 1136, 1136, 1136, 1136, 1096, 1096, 1096,
     1096, 1096, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1096, 1096, 1096, 1096,

     1096, 1096, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1136,
     1136, 1136, 1136, 1136, 1136, 1101, 1101, 1101, 1101, 1101,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1101, 1101, 1101, 1101, 1101, 1101,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1136, 1136, 1136,
     1136, 1136, 1136, 1102, 1102, 1102, 1102, 1102, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1102, 1102, 1102, 1102, 1102, 1102, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1136,
     1136, 1104, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1136, 1136, 1136, 1136, 1136, 1136, 1105,
     1105, 1105, 1105, 1105, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1105, 1105,
     1105, 1105, 1105, 1105, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1136, 1136, 1136, 1136, 1136, 1136, 1107, 1107, 1107,
     1107, 1107, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1107, 1107, 1107, 1107,
     1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1136,

     1136, 1136, 1136, 1136, 1136, 1108, 1108, 1108, 1108, 1108,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1108, 1108, 1108, 1108, 1108, 1108,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1136, 1136, 1136,
     1136, 1136, 1136, 1110, 1110, 1110, 1110, 1110, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1136, 1136, 1136, 1136, 1136,
     1136, 1111, 1111, 1111, 1111, 1111, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1111, 1111, 1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1136, 1136, 1136, 1136, 1136, 1136, 1113,
     1113, 1113, 1113, 1113, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1113, 1113,
     1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1136, 1136, 1136, 1136, 1136, 1136, 1114, 1114, 1114,
     1114, 1114, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1114, 1114, 1114, 1114,
     1114, 1114, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1136,
     1136, 1136, 1136, 1136, 1136, 1116, 1116, 1116, 1116, 1116,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1116, 1116, 1116, 1116, 1116, 1116,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1136, 1136, 1136,
     1136, 1136, 1136, 1117, 1117, 1117, 1117, 1117, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1117, 1117, 1117, 1117, 1117, 1117, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1136, 1136, 1136, 1136, 1136,
     1136, 1119, 1119, 1119, 1119, 1119, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1119, 1119, 1119, 1119, 1119, 1119, 1120, 1120, 1120, 1120,

     1120, 1120, 1120, 1136, 1136, 1136, 1136, 1136, 1136, 1120,
     1120, 1120, 1120, 1120, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1120, 1120,
     1120, 1120, 1120, 1120, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1136, 1136, 1136, 1136, 1136, 1136, 1122, 1122, 1122,
     1122, 1122, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1122, 1122, 1122, 1122,
     1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1136,
     1136, 1136, 1136, 1136, 1136, 1123, 1123, 1123, 1123, 1123,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1123, 1123, 1123, 1123, 1123, 1123,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1136, 1136, 1136,
     1136, 1136, 1136, 1125, 1125, 1125, 1125, 1125, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1125, 1125, 1125, 1125, 1125, 1125, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1136, 1136, 1136, 1136, 1136,
     1136, 1126, 1126, 1126, 1126, 1126, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1126, 1126, 1126, 1126, 1126, 1126, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1136, 1136, 1136, 1136, 1136, 1136, 1128,

     1128, 1128, 1128, 1128, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1128, 1128,
     1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1136, 1136, 1136, 1136, 1136, 1136, 1129, 1129, 1129,
     1129, 1129, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1129, 1129, 1129, 1129,
     1129, 1129, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1136,
     1136, 1136, 1136, 1136, 1136, 1131, 1131, 1131, 1131, 1131,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1131, 1131, 1131, 1131, 1131, 1131,

     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1136, 1136, 1136,
     1136, 1136, 1136, 1132, 1132, 1132, 1132, 1132, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1132, 1132, 1132, 1132, 1132, 1132, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1136, 1136, 1136, 1136, 1136,
     1136, 1134, 1134, 1134, 1134, 1134, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136, 1135,
     1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1135, 1135,
     1135, 1135, 1135, 1135,  209,  209,  209,  209,  209,  209,
      209, 1136, 1136, 1136, 1136, 1136, 1136,  209,  209,  209,
      209,  209, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,  209,  209,  209,  209,
      209,  209,  267,  267,  267,  267,  267,  267,  267, 1136,
     1136, 1136, 1136, 1136, 1136,  267,  267,  267,  267,  267,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136,  267,  267,  267,  267,  267,  267,
      149, 1136, 1136,  149,  149,  149,  152, 1136, 1136,  152,

      152,  152,  209,  209,  209,  209, 1136,  209,  238, 1136,
      238,  238,  238,  238,  267,  267,  267, 1136, 1136,  267,
      296, 1136,  296,  296,  296,  296,  325, 1136,  325,  325,
      325,  325,  326, 1136,  326,  326,  326,  326,  327,  327,
      327,  327,  327,  327,  329, 1136,  329,  329,  329,  329,
      332,  332,  332,  332,  332,  332,  385,  385,  385,  385,
      385,  385,  389,  389,  389,  389,  389,  389,  394,  394,
      394,  394,  394,  394,  449,  449,  449,  449,  449,  449,
      453,  453,  453,  453,  453,  453,  458,  458,  458,  458,
      458,  458,  513, 1136, 1136,  513,  513,  513,  514, 1136,

     1136,  514,  514,  514,  515,  515,  515,  515,  515,  515,
      576,  576,  576,  576,  576,  576,  641,  641,  641,  641,
      641,  641,  453,  453,  453,  453,  453,  453,  458,  458,
      458,  458,  458,  458,  513, 1136, 1136,  513,  513,  513,
      514, 1136, 1136,  514,  514,  514,  706,  706,  706,  706,
      706,  706,  751,  751,  751,  751,  751,  751,  798,  798,
      798,  798,  798,  798,    7, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136
    } ;

static yyconst flex_int16_t yy_chk[6235] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    9,    9,    9,
       10,   10,   10,   11,   13,   17,   26,   26,   17,   18,
       18,   18,   18,   18,   18,   18,   27,   28,   29,   32,
       34,   37,   29,   29,   37,   35,   32,   27,   27,   31,
       34,   35,   28,   28,   36,   43,   43,   54,   38,   36,
       54,   13,   11,   25,   25,   25,   25,   25,   25,   25,
       31,   31,   38,   49,   49,  479,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   73,   73,  479,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   30,   30,   30,
       30,   30,   30,   30,   39,  171,   57,  171,   50,   57,
       30,   30,   30,   30,   30,   50,   40,   39,   39,   40,
       51,   39,   40,   53,   45,   55,   51,   45,   53,   30,
       30,   30,   30,   30,   30,   45,   45,   44, 1196,   55,
       44,   44,   46,   52,   30,   30,   44,   30,   58,   52,
       46,   47,   48,   46,   46,   47,   47,   56,   48,   48,
       56,   59,   79,   56,   74,   75,   76,   59,   81,   79,
       76,   76,   96,   56,   56,   74,   74,   56,   81,   96,
       75,   75,   58,   58,   62,   62,   62,   62, 1195,   62,

       58,   82,   58,   63,   63,   63,   63,   82,   63,   64,
       64,   64,   64,   78,   64,   65,   65,   65,   65,   85,
       65,   66,   66,   66,   66,   83,   66, 1194,   84,   66,
       83,   84,   66,   85,   78,   78,   62,   89,   89,   95,
       95,   68,   68,   68,   68,   63,   68,  100,  149,   91,
      100,   64,   91,   69,   69,   69,   69,   65,   69, 1193,
       91,   91,   92,   66,   67,   67,   67,   67,  121,   67,
       92,   86,  101,   92,   92,  121,   67,   67,   67,   67,
       67,   67,   67,   68,   86,   86,  101,  149,   86,   67,
       67,   67,   67,   67,   97,   69,   70,   70,   70,   70,

       97,   70,   71,   71,   71,   71,   67,   71,   67,   67,
       67,   67,   67,   67,   87,   90,   94,   87,   90,   90,
       87,   93,   94,   94,   90,   93,   93,   98,  103,   99,
      105,  103,  126,   98,   99,  126,  105,  118,   70,  115,
      115,  118,  118, 1192,   71,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  123,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  123,  650,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  650,   72,  104,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   77,   77,   77,   77,   77,   77,   77,  152,
      117,  131,  131,  104,  104,   77,   77,   77,   77,   77,
      116,  104,  124,  104,  102,  117,  117,  102,  124,  127,
      102,  116,  116, 1191,   77,   77,   77,   77,   77,   77,
      102,  102,  125,  127,  102,  129,  152,  125,  129,   77,
       77,  129,   77,  106,  106,  106,  106,  139,  106,  107,
      107,  107,  107,  139,  107,  108,  108,  108,  108, 1190,
      108,  120,  133,  108,  138,  133,  108,  110,  110,  110,
      110,  138,  110,  133,  133,  111,  111,  111,  111,  141,

      111,  143,  120,  120,  141,  106,  170,  112,  112,  112,
      112,  107,  112,  137,  137,  143,  134,  108,  109,  109,
      109,  109,  170,  109,  134,  128,  168,  134,  134,  110,
      109,  109,  109,  109,  109,  109,  109,  111,  128,  128,
      169,  169,  128,  109,  109,  109,  109,  109,  168,  112,
      113,  113,  113,  113,  135,  113,  173,  173,  135,  135,
      109,  338,  109,  109,  109,  109,  109,  109,  132,  136,
      338,  132,  132,  140, 1189,  136,  136,  132,  142,  140,
      145,  142,  147,  145,  148,  148,  148,  339,  147,  159,
      159,  159,  113,  114,  114,  114,  114,  114,  114,  114,

      162,  339,  114,  162,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  184,  184,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114, 1188,  114,  146,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      119,  119,  119,  119,  119,  119,  119,  163,  167,  172,
      163,  146,  146,  119,  119,  119,  119,  119,  167,  146,
      174,  146,  144,  178,  172,  144,  174,  175,  144,  175,
      178,  175,  119,  119,  119,  119,  119,  119,  144,  144,

      176,  177,  144,  176,  177, 1187,  181,  119,  119,  181,
      119,  157,  157,  157,  157,  157,  157,  157,  160,  160,
      160,  160,  160,  160,  160,  180,  179,  186,  191,  191,
      180,  160,  160,  160,  160,  160,  179,  182,  183,  193,
      182,  190,  192,  196,  183,  186,  193,  190,  194,  196,
      160,  160,  160,  160,  160,  160,  203,  192,  192,  195,
      195,  203,  197,  194,  197,  200,  197,  198,  160,  199,
      198,  200,  199,  201,  202,  204,  201,  204,  205,  207,
      206,  202,  208,  225,  219,  205,  206,  219,  220,  211,
      207,  220,  208,  209,  209,  209,  209,  211,  209,  210,

      210,  210,  210,  227,  210,  225,  224,  211,  211,  215,
      215,  215,  215,  215,  215,  215,  224,  226,  226,  227,
      228,  229,  228,  230,  230,  233,  231,  234,  233,  211,
      234,  211,  231,  236,  237,  209,  229,  235,  232,  237,
      232,  210,  232,  236,  235,  238,  238,  238,  238,  239,
      238,  244,  239, 1186,  211,  211,  212,  212,  212,  212,
      240,  212,  241,  240,  212,  212,  242,  242,  241,  244,
      250,  248,  249,  249,  251,  212,  212,  248,  252,  253,
      253,  251,  254,  258,  260,  250,  250,  238,  254,  258,
      255,  260,  255,  252,  255,  284,  284,  212,  212,  212,

      256,  257,  259,  256,  257,  259,  261,  262,  263,  262,
      264,  261,  286,  269,  286,  263,  264,  265,  269,  269,
      266,  269,  212,  212,  213,  213,  213,  213,  265,  213,
      266,  269,  269,  213,  267,  267,  267,  267,  277,  267,
      320,  277,  320,  213,  213,  268,  268,  268,  268,  278,
      268,  283,  278,  269,  282,  269,  273,  273,  273,  273,
      273,  273,  273,  289,  282,  213,  213,  213,  285,  289,
      287,  288,  288,  283,  291,  293,  267,  291,  269,  269,
      292,  295,  293,  292,  285,  287,  295,  268,  300,  300,
      213,  213,  214,  214,  214,  214,  214,  214,  214,  290,

      294,  290, 1185,  290,  302,  214,  214,  214,  214,  214,
      294,  296,  296,  296,  296,  297,  296,  298,  297,  313,
      298,  313,  302,  313,  214,  214,  214,  214,  214,  214,
      216,  216,  216,  216,  299,  216,  306,  307,  307,  216,
      299,  308,  306,  310,  309,  311,  311,  325,  312,  216,
      216,  309,  314,  296,  312,  314,  308,  308,  310,  315,
      316,  317,  315,  318,  317,  341,  316,  323,  321,  319,
      318,  216,  216,  216,  319,  321,  322,  324,  323,  326,
      341, 1184,  322,  332,  332,  332,  325,  324,  330,  330,
      330,  330,  330,  330,  330,  342,  216,  216,  217,  217,

      217,  217,  217,  217,  217,  333,  333,  333,  336,  683,
      337,  217,  217,  217,  217,  217,  326,  337,  343,  340,
      342,  345,  345,  343,  351,  351,  336,  340,  344,  347,
      217,  217,  217,  217,  217,  217,  683,  344,  354,  347,
      348,  348,  350,  348,  356,  354,  355,  350,  217,  270,
      270,  270,  270,  359,  270,  270,  270,  270,  270,  352,
      355,  358,  356,  352,  357,  360,  363,  359,  270,  270,
      358,  357,  361,  352,  360,  361,  364,  365,  370,  376,
      366,  368,  376,  363,  364,  366,  371,  371,  370,  371,
      270,  270,  270,  368,  367,  365,  367,  373,  367,  367,

      374,  374,  373,  375,  375,  380,  380,  377,  381,  381,
      953,  377,  400,  379,  384,  270,  270,  271,  271,  271,
      271,  377,  271,  271,  271,  382,  271,  379,  383,  384,
      400,  388,  382,  953,  383,  401,  271,  271,  388,  398,
      398,  398,  401,  367,  393,  393,  393,  393,  393,  393,
      393,  397,  397,  397,  397,  402,  397,  403,  271,  271,
      271,  404,  405,  407,  402,  408,  411,  406,  407,  404,
      414,  403,  409,  409,  408,  414,  411,  405,  412,  412,
      522,  412, 1183,  271,  271,  272,  272,  272,  272,  272,
      272,  272,  406,  397,  415,  415,  418,  419,  272,  272,

      272,  272,  272,  418,  422,  421,  425,  424,  447,  425,
      522,  419,  421,  422,  447,  420,  424,  272,  272,  272,
      272,  272,  272,  274,  274,  274,  274,  416,  274,  274,
      274,  416,  274,  420,  423,  427,  428,  429,  432, 1182,
      430,  416,  274,  274,  428,  430,  434,  443,  423,  431,
      432,  431,  427,  431,  431,  429,  434,  435,  435,  441,
      435,  443,  437,  441,  274,  274,  274,  437,  438,  438,
      439,  439,  440,  441,  446,  440,  444,  444,  445,  445,
      469,  446,  994,  469,  448,  462,  462,  462,  471,  274,
      274,  275,  275,  275,  275,  275,  275,  275,  431,  448,

      473,  471,  491,  491,  275,  275,  275,  275,  275,  457,
      457,  457,  457,  457,  457,  457,  467,  473,  465,  474,
      467,  466,  468,  275,  275,  275,  275,  275,  275,  465,
      466,  470,  468,  476,  994,  483,  477,  474,  470,  483,
      472,  275,  335,  335,  335,  335,  335,  335,  335,  472,
      476,  478,  475,  476,  477,  335,  335,  335,  335,  335,
      475,  482,  485,  487,  478,  507,  495,  487,  495,  507,
      495,  495,  482,  485,  335,  335,  335,  335,  335,  335,
      385,  385,  385,  385,  486,  385,  480,  488,  385,  385,
      480,  489,  492,  486,  480,  494,  488,  495,  497,  385,

      385,  496,  492,  498,  480,  501,  489,  496,  494,  499,
      500,  498,  503,  502,  510,  511,  497,  504,  501,  508,
      509,  385,  385,  385,  513,  510,  499,  511,  500,  499,
      502,  503,  504,  514,  505, 1181,  508,  509,  505,  523,
      512,  520,  505,  512,  520,  530,  385,  385,  387,  387,
      387,  387,  505,  387,  530,  554,  531,  387,  532,  387,
      555,  523,  531,  513,  532,  534,  533,  387,  387,  533,
      514,  517,  517,  517,  517,  517,  517,  517,  535,  534,
      536,  537,  539,  540,  535,  538,  553,  548, 1180,  387,
      387,  387,  538,  540,  536,  548,  549,  542,  539,  537,

      542,  551,  551,  554,  558,  549,  555,  561,  587,  562,
      561,  566,  566,  558,  387,  387,  389,  389,  389,  389,
      559,  389,  560,  562,  563,  389,  559,  564,  560,  565,
      563,  553,  567,  568,  573,  389,  389,  569,  587,  571,
      568,  564,  571,  565,  605,  574,  573,  572,  574,  572,
      567,  572,  572,  569,  605,  616,  616,  389,  389,  389,
      578,  578,  578,  578,  579,  578,  585,  599,  588,  585,
      595,  579,  581,  581,  581,  581,  581,  581,  581,  595,
      619,  599,  389,  389,  390,  390,  390,  390,  596,  390,
      588,  597,  598,  390,  596,  598,  572,  597,  601,  602,

      604,  618,  578,  390,  390,  583,  583,  583,  583,  600,
      583,  603,  601,  613,  614,  600,  604,  602,  603,  607,
      623,  613,  607,  614,  620,  390,  390,  390,  619,  623,
      624,  625,  626,  628,  627,  626,  624,  625, 1179,  628,
      631,  631,  632,  684,  658,  629,  618,  583,  627,  630,
      390,  390,  392,  392,  392,  392,  392,  392,  392,  629,
      632,  634,  658,  630,  633,  392,  392,  392,  392,  392,
      620,  633,  636,  684,  637,  636,  637,  634,  637,  637,
      639,  663,  638,  639,  392,  392,  392,  392,  392,  392,
      394,  394,  394,  394,  638,  394,  644,  653,  660,  394,

      664,  653,  663,  644,  664, 1178,  652,  660,  661,  394,
      394,  646,  646,  646,  646,  646,  646,  646,  652,  668,
      661,  666,  662,  637,  665,  666,  669,  670,  669,  672,
      668,  394,  394,  394,  662,  670,  665,  678,  681,  679,
      685,  689,  688,  720,  691,  692,  720,  678,  679,  692,
      672,  688,  690,  689,  693,  681,  394,  394,  395,  395,
      395,  395,  696,  395,  690,  691,  693,  395,  685,  694,
      695,  698,  701,  694,  695,  704,  808,  395,  395,  696,
      808,  699,  698,  699,  702,  703,  702,  701,  702,  702,
      704,  703,  707,  707,  707,  707,  707,  707,  707,  395,

      395,  395,  711,  712,  713,  715,  714,  716,  718,  719,
      718,  747,  715,  712,  721,  702,  719,  746,  722,  713,
      714,  711,  721,  716,  395,  395,  396,  396,  396,  396,
      722,  396,  723,  723,  726,  396,  711,  724,  724,  727,
      732,  733,  734,  737,  745,  396,  396,  736,  733,  736,
      737, 1177,  726,  727,  732,  741,  739,  747,  734,  739,
      742,  743,  743,  741,  744,  746,  753,  396,  396,  396,
      750,  750,  742,  753,  744,  755,  755,  755,  755,  755,
      755,  755,  758,  765,  762,  765,  770,  770,  760,  745,
      761,  762,  396,  396,  399,  399,  399,  399,  399,  399,

      399,  758,  759,  760,  761,  763,  766,  399,  399,  399,
      399,  399,  759,  766,  767,  768,  758,  767,  771,  771,
      783,  763,  783,  768,  769,  773,  399,  399,  399,  399,
      399,  399,  449,  449,  449,  449,  769,  449,  449,  449,
      449,  449,  774,  773,  779,  781,  780,  784,  790,  790,
      789,  449,  449,  780,  784,  788,  774,  786,  779,  791,
      786,  781,  789,  788,  793,  792,  809,  794, 1176,  791,
      797,  797,  800,  449,  449,  449,  805,  809,  812,  800,
      802,  802,  802,  802,  802,  802,  802,  807,  806,  810,
      807,  810,  805,  813,  812,  805,  806, 1175,  449,  449,

      451,  451,  451,  451,  813,  451,  451,  451,  814,  451,
      792,  451,  793,  794,  815,  816,  817,  818,  821,  451,
      451,  816,  821,  814,  815,  826,  827,  831,  828,  826,
      828,  830,  837,  817,  818,  833,  835,  827,  831,  836,
      838,  451,  451,  451,  841,  836,  835,  830,  838,  837,
      833,  839,  840,  850,  854,  855,  855,  866,  887,  844,
      854,  850,  853,  866,  887,  851,  451,  451,  452,  452,
      452,  452,  841,  452,  452,  452,  844,  452,  839,  851,
      853,  856,  840,  856,  865,  867,  867,  452,  452,  845,
      845,  845,  845,  845,  845,  845,  861,  862,  868,  861,

      868,  873,  865,  889,  886,  889,  862,  884,  873,  452,
      452,  452,  879,  879,  879,  879,  879,  879,  879,  883,
      895,  884,  886,  888,  888,  894,  898,  883,  894,  895,
      900,  900, 1030, 1030,  452,  452,  453,  453,  453,  453,
      899,  453,  453,  453,  898,  453,  899,  901,  917,  901,
      906,  921,  917,  922,  920,  453,  453,  906,  912,  912,
      912,  912,  912,  912,  912,  916,  920,  927,  921,  922,
      932,  928,  933,  939,  934,  916,  985,  453,  453,  453,
      928,  985,  932, 1174,  939,  947,  952,  958,  927,  933,
      934,  944,  944,  944,  944,  944,  944,  944, 1173,  947,

      952,  958,  453,  453,  454,  454,  454,  454,  949,  454,
      454,  454,  950,  454,  959,  969,  955,  949,  956, 1172,
     1018,  950,  963,  454,  454,  955,  959,  956,  961,  961,
      961,  961,  961,  961,  961,  965,  963,  968,  969,  966,
      971,  972,  974,  975,  965,  454,  454,  454,  966,  971,
      972,  968,  999, 1006, 1018,  975,  974,  977,  977,  977,
      977,  977,  977,  977,  979, 1066,  999,  981,  979,  982,
      454,  454,  456,  456,  456,  456,  981,  456,  982,  984,
     1011, 1066,  987,  984,  456,  456,  456,  456,  456,  456,
      456,  987,  990,  988, 1011, 1036,  990,  456,  456,  456,

      456,  456,  988,  991, 1023, 1006, 1033, 1033, 1023,  991,
     1038, 1038, 1036, 1171,  456, 1054,  456,  456,  456,  456,
      456,  456,  458,  458,  458,  458, 1054,  458,  458,  458,
      992,  458,  992,  992,  992,  992,  992,  992,  992, 1040,
     1040,  458,  458, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1042, 1062, 1064,
     1062, 1064, 1170,  458,  458,  458, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1044, 1042, 1046, 1048, 1167, 1159, 1050,
     1052, 1148, 1056, 1044, 1048, 1046, 1050, 1052,  458,  458,
      459,  459,  459,  459, 1056,  459,  459,  459, 1057,  459,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1060,  459,
      459, 1139, 1094, 1079, 1060, 1072, 1070, 1068, 1059, 1058,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1055, 1035, 1032,
     1027,  459,  459,  459, 1080, 1026, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1081, 1025, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1024, 1022, 1021, 1020,  459,  459,  461, 1019,
     1015, 1014, 1013, 1012, 1010, 1009, 1008,  461,  461,  461,
      461,  461,  461,  461, 1007, 1003, 1002, 1001, 1000,  998,
      461,  461,  461,  461,  461, 1095,  997, 1095, 1095, 1095,
     1095, 1095, 1095, 1095,  996,  995,  993,  989,  986,  461,

      461,  461,  461,  461,  461,  463,  463,  463,  463,  463,
      463,  463,  983,  980,  463,  973,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  970,  967,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  964,  463,  957,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  464,  464,  464,  464,  464,  464,  464,  954,
      951,  948,  943,  942,  941,  464,  464,  464,  464,  464,
     1096,  940, 1096, 1096, 1096, 1096, 1096, 1096, 1096,  938,

      937,  936,  935,  931,  464,  464,  464,  464,  464,  464,
      519,  519,  519,  519,  519,  519,  519,  930,  929,  926,
      925,  924,  923,  519,  519,  519,  519,  519,  919,  918,
      915,  914,  910,  909,  908,  907,  905,  904,  903,  902,
      897,  896,  519,  519,  519,  519,  519,  519,  576,  576,
      576,  576,  893,  576,  892,  891,  576,  576,  890,  885,
      882,  881,  877,  876,  875,  874,  872,  576,  576,  871,
      870,  869,  864,  863,  860,  859,  858,  857,  852,  849,
      848,  843,  842,  834,  832,  829,  825,  824,  823,  576,
      576,  576,  822,  820,  819,  811,  804,  796,  795,  787,

      785,  782,  778,  777,  776,  775,  772,  764,  757,  749,
      748,  740,  738,  735,  576,  576,  577,  577,  577,  577,
      731,  577,  730,  729,  577,  577,  728,  725,  717,  710,
      706,  705,  700,  697,  687,  577,  577,  686,  682,  680,
      677,  676,  675,  674,  673,  671,  667,  659,  657,  656,
      655,  654,  651,  643,  640,  635,  622,  577,  577,  577,
      621,  617,  615,  612,  611,  610,  609,  608,  606,  594,
      593,  592,  591,  590,  589,  586,  575,  570,  557,  556,
      552,  550,  577,  577,  580,  580,  580,  580,  580,  580,
      580,  547,  546,  545,  544,  543,  541,  580,  580,  580,

      580,  580,  529,  528,  527,  526,  525,  524,  521,  515,
      506,  493,  490,  484,  481,  455,  580,  580,  580,  580,
      580,  580,  582,  582,  582,  582,  442,  582,  436,  433,
      426,  582,  417,  413,  410,  391,  378,  372,  369,  362,
      353,  582,  582,  349,  346,  334,  328,  327,  305,  304,
      303,  301,  281,  280,  279,  276,  247,  246,  245,  243,
      223,  222,  221,  582,  582,  582,  218,  189,  188,  187,
      185,  166,  165,  164,  161,  155,  122,   80,   33,   24,
        7,    0,    0,    0,    0,    0,    0,    0,  582,  582,
      584,  584,  584,  584,  584,  584,  584,    0,    0,    0,

        0,    0,    0,  584,  584,  584,  584,  584,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  584,  584,  584,  584,  584,  584,  641,  641,
      641,  641,    0,  641,  641,  641,  641,  641,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  641,  641,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  641,
      641,  641,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  641,  641,  642,  642,  642,  642,

        0,  642,  642,  642,  642,  642,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  642,  642,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  642,  642,  642,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  642,  642,  645,  645,  645,  645,  645,  645,
      645,    0,    0,    0,    0,    0,    0,  645,  645,  645,
      645,  645,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  645,  645,  645,  645,

      645,  645,  649,  649,  649,  649,  649,  649,  649,    0,
        0,    0,    0,    0,    0,  649,  649,  649,  649,  649,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  649,  649,  649,  649,  649,  649,
      709,  709,  709,  709,  709,  709,  709,    0,    0,    0,
        0,    0,    0,  709,  709,  709,  709,  709,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  709,  709,  709,  709,  709,  709,  754,  754,
      754,  754,  754,  754,  754,    0,    0,    0,    0,    0,
        0,  754,  754,  754,  754,  754,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      754,  754,  754,  754,  754,  754,  756,  756,  756,  756,
      756,  756,  756,    0,    0,    0,    0,    0,    0,  756,
      756,  756,  756,  756,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  756,  756,
      756,  756,  756,  756,  801,  801,  801,  801,  801,  801,
      801,    0,    0,    0,    0,    0,    0,  801,  801,  801,
      801,  801,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  801,  801,  801,  801,
      801,  801,  803,  803,  803,  803,  803,  803,  803,    0,

        0,    0,    0,    0,    0,  803,  803,  803,  803,  803,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  803,  803,  803,  803,  803,  803,
      847,  847,  847,  847,  847,  847,  847,    0,    0,    0,
        0,    0,    0,  847,  847,  847,  847,  847,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  847,  847,  847,  847,  847,  847,  878,  878,
      878,  878,  878,  878,  878,    0,    0,    0,    0,    0,
        0,  878,  878,  878,  878,  878,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      878,  878,  878,  878,  878,  878,  880,  880,  880,  880,
      880,  880,  880,    0,    0,    0,    0,    0,    0,  880,
      880,  880,  880,  880,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  880,  880,
      880,  880,  880,  880,  911,  911,  911,  911,  911,  911,
      911,    0,    0,    0,    0,    0,    0,  911,  911,  911,
      911,  911,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  911,  911,  911,  911,
      911,  911,  913,  913,  913,  913,  913,  913,  913,    0,
        0,    0,    0,    0,    0,  913,  913,  913,  913,  913,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  913,  913,  913,  913,  913,  913,
      946,  946,  946,  946,  946,  946,  946,    0,    0,    0,
        0,    0,    0,  946,  946,  946,  946,  946,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  946,  946,  946,  946,  946,  946,  960,  960,
      960,  960,  960,  960,  960,    0,    0,    0,    0,    0,
        0,  960,  960,  960,  960,  960,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      960,  960,  960,  960,  960,  960,  962,  962,  962,  962,

      962,  962,  962,    0,    0,    0,    0,    0,    0,  962,
      962,  962,  962,  962,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  962,  962,
      962,  962,  962,  962,  976,  976,  976,  976,  976,  976,
      976,    0,    0,    0,    0,    0,    0,  976,  976,  976,
      976,  976,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  976,  976,  976,  976,
      976,  976,  978,  978,  978,  978,  978,  978,  978,    0,
        0,    0,    0,    0,    0,  978,  978,  978,  978,  978,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  978,  978,  978,  978,  978,  978,
     1004,    0, 1004, 1004, 1004, 1004, 1004, 1004, 1004,    0,
        0,    0,    0,    0,    0, 1004, 1004, 1004, 1004, 1004,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1004, 1004, 1004, 1004, 1004, 1004,
     1016,    0, 1016, 1016, 1016, 1016, 1016, 1016, 1016,    0,
        0,    0,    0,    0,    0, 1016, 1016, 1016, 1016, 1016,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1016, 1016, 1016, 1016, 1016, 1016,
     1031, 1031, 1031, 1031, 1031, 1031, 1031,    0,    0,    0,

        0,    0,    0, 1031, 1031, 1031, 1031, 1031,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1031, 1031, 1031, 1031, 1031, 1031, 1034, 1034,
     1034, 1034, 1034, 1034, 1034,    0,    0,    0,    0,    0,
        0, 1034, 1034, 1034, 1034, 1034,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1034, 1034, 1034, 1034, 1034, 1034, 1039, 1039, 1039, 1039,
     1039, 1039, 1039,    0,    0,    0,    0,    0,    0, 1039,
     1039, 1039, 1039, 1039,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1039, 1039,

     1039, 1039, 1039, 1039, 1041, 1041, 1041, 1041, 1041, 1041,
     1041,    0,    0,    0,    0,    0,    0, 1041, 1041, 1041,
     1041, 1041,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1041, 1041, 1041, 1041,
     1041, 1041, 1045, 1045, 1045, 1045, 1045, 1045, 1045,    0,
        0,    0,    0,    0,    0, 1045, 1045, 1045, 1045, 1045,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1045, 1045, 1045, 1045, 1045, 1045,
     1047, 1047, 1047, 1047, 1047, 1047, 1047,    0,    0,    0,
        0,    0,    0, 1047, 1047, 1047, 1047, 1047,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1047, 1047, 1047, 1047, 1047, 1047, 1051, 1051,
     1051, 1051, 1051, 1051, 1051,    0,    0,    0,    0,    0,
        0, 1051, 1051, 1051, 1051, 1051,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1051, 1051, 1051, 1051, 1051, 1051, 1053, 1053, 1053, 1053,
     1053, 1053, 1053,    0,    0,    0,    0,    0,    0, 1053,
     1053, 1053, 1053, 1053,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1053, 1053,
     1053, 1053, 1053, 1053, 1063, 1063, 1063, 1063, 1063, 1063,

     1063,    0,    0,    0,    0,    0,    0, 1063, 1063, 1063,
     1063, 1063,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1063, 1063, 1063, 1063,
     1063, 1063, 1065, 1065, 1065, 1065, 1065, 1065, 1065,    0,
        0,    0,    0,    0,    0, 1065, 1065, 1065, 1065, 1065,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065,
     1069, 1069, 1069, 1069, 1069, 1069, 1069,    0,    0,    0,
        0,    0,    0, 1069, 1069, 1069, 1069, 1069,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1069, 1069, 1069, 1069, 1069, 1069, 1071, 1071,
     1071, 1071, 1071, 1071, 1071,    0,    0,    0,    0,    0,
        0, 1071, 1071, 1071, 1071, 1071,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1071, 1071, 1071, 1071, 1071, 1071, 1074, 1074, 1074, 1074,
     1074, 1074, 1074,    0,    0,    0,    0,    0,    0, 1074,
     1074, 1074, 1074, 1074,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1074, 1074,
     1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075, 1075,
     1075,    0,    0,    0,    0,    0,    0, 1075, 1075, 1075,

     1075, 1075,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1075, 1075, 1075, 1075,
     1075, 1075, 1077, 1077, 1077, 1077, 1077, 1077, 1077,    0,
        0,    0,    0,    0,    0, 1077, 1077, 1077, 1077, 1077,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1077, 1077, 1077, 1077, 1077, 1077,
     1078, 1078, 1078, 1078, 1078, 1078, 1078,    0,    0,    0,
        0,    0,    0, 1078, 1078, 1078, 1078, 1078,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1078, 1078, 1078, 1078, 1078, 1078, 1083, 1083,

     1083, 1083, 1083, 1083, 1083,    0,    0,    0,    0,    0,
        0, 1083, 1083, 1083, 1083, 1083,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084,
     1084, 1084, 1084,    0,    0,    0,    0,    0,    0, 1084,
     1084, 1084, 1084, 1084,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1084, 1084,
     1084, 1084, 1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086,
     1086,    0,    0,    0,    0,    0,    0, 1086, 1086, 1086,
     1086, 1086,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1086, 1086, 1086, 1086,
     1086, 1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087,    0,
        0,    0,    0,    0,    0, 1087, 1087, 1087, 1087, 1087,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1087, 1087, 1087, 1087, 1087, 1087,
     1089, 1089, 1089, 1089, 1089, 1089, 1089,    0,    0,    0,
        0,    0,    0, 1089, 1089, 1089, 1089, 1089,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1089, 1089, 1089, 1089, 1089, 1089, 1090, 1090,
     1090, 1090, 1090, 1090, 1090,    0,    0,    0,    0,    0,

        0, 1090, 1090, 1090, 1090, 1090,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1090, 1090, 1090, 1090, 1090, 1090, 1092, 1092, 1092, 1092,
     1092, 1092, 1092,    0,    0,    0,    0,    0,    0, 1092,
     1092, 1092, 1092, 1092,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1092, 1092,
     1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093, 1093,
     1093,    0,    0,    0,    0,    0,    0, 1093, 1093, 1093,
     1093, 1093,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1093, 1093, 1093, 1093,

     1093, 1093, 1098, 1098, 1098, 1098, 1098, 1098, 1098,    0,
        0,    0,    0,    0,    0, 1098, 1098, 1098, 1098, 1098,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1098, 1098, 1098, 1098, 1098, 1098,
     1099, 1099, 1099, 1099, 1099, 1099, 1099,    0,    0,    0,
        0,    0,    0, 1099, 1099, 1099, 1099, 1099,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1099, 1099, 1099, 1099, 1099, 1099, 1101, 1101,
     1101, 1101, 1101, 1101, 1101,    0,    0,    0,    0,    0,
        0, 1101, 1101, 1101, 1101, 1101,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1101, 1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102, 1102,
     1102, 1102, 1102,    0,    0,    0,    0,    0,    0, 1102,
     1102, 1102, 1102, 1102,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1102, 1102,
     1102, 1102, 1102, 1102, 1104, 1104, 1104, 1104, 1104, 1104,
     1104,    0,    0,    0,    0,    0,    0, 1104, 1104, 1104,
     1104, 1104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1104, 1104, 1104, 1104,
     1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105,    0,

        0,    0,    0,    0,    0, 1105, 1105, 1105, 1105, 1105,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1105, 1105, 1105, 1105, 1105, 1105,
     1107, 1107, 1107, 1107, 1107, 1107, 1107,    0,    0,    0,
        0,    0,    0, 1107, 1107, 1107, 1107, 1107,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108,
     1108, 1108, 1108, 1108, 1108,    0,    0,    0,    0,    0,
        0, 1108, 1108, 1108, 1108, 1108,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1108, 1108, 1108, 1108, 1108, 1108, 1110, 1110, 1110, 1110,
     1110, 1110, 1110,    0,    0,    0,    0,    0,    0, 1110,
     1110, 1110, 1110, 1110,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1110, 1110,
     1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111, 1111, 1111,
     1111,    0,    0,    0,    0,    0,    0, 1111, 1111, 1111,
     1111, 1111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1111, 1111, 1111, 1111,
     1111, 1111, 1113, 1113, 1113, 1113, 1113, 1113, 1113,    0,
        0,    0,    0,    0,    0, 1113, 1113, 1113, 1113, 1113,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1113, 1113, 1113, 1113, 1113, 1113,
     1114, 1114, 1114, 1114, 1114, 1114, 1114,    0,    0,    0,
        0,    0,    0, 1114, 1114, 1114, 1114, 1114,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1114, 1114, 1114, 1114, 1114, 1114, 1116, 1116,
     1116, 1116, 1116, 1116, 1116,    0,    0,    0,    0,    0,
        0, 1116, 1116, 1116, 1116, 1116,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,

     1117, 1117, 1117,    0,    0,    0,    0,    0,    0, 1117,
     1117, 1117, 1117, 1117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1117, 1117,
     1117, 1117, 1117, 1117, 1119, 1119, 1119, 1119, 1119, 1119,
     1119,    0,    0,    0,    0,    0,    0, 1119, 1119, 1119,
     1119, 1119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1119, 1119, 1119, 1119,
     1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120,    0,
        0,    0,    0,    0,    0, 1120, 1120, 1120, 1120, 1120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1120, 1120, 1120, 1120, 1120, 1120,
     1122, 1122, 1122, 1122, 1122, 1122, 1122,    0,    0,    0,
        0,    0,    0, 1122, 1122, 1122, 1122, 1122,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1122, 1122, 1122, 1122, 1122, 1122, 1123, 1123,
     1123, 1123, 1123, 1123, 1123,    0,    0,    0,    0,    0,
        0, 1123, 1123, 1123, 1123, 1123,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1123, 1123, 1123, 1123, 1123, 1123, 1125, 1125, 1125, 1125,
     1125, 1125, 1125,    0,    0,    0,    0,    0,    0, 1125,

     1125, 1125, 1125, 1125,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1125, 1125,
     1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126, 1126, 1126,
     1126,    0,    0,    0,    0,    0,    0, 1126, 1126, 1126,
     1126, 1126,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1126, 1126, 1126, 1126,
     1126, 1126, 1128, 1128, 1128, 1128, 1128, 1128, 1128,    0,
        0,    0,    0,    0,    0, 1128, 1128, 1128, 1128, 1128,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1128, 1128, 1128, 1128, 1128, 1128,

     1129, 1129, 1129, 1129, 1129, 1129, 1129,    0,    0,    0,
        0,    0,    0, 1129, 1129, 1129, 1129, 1129,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1129, 1129, 1129, 1129, 1129, 1129, 1131, 1131,
     1131, 1131, 1131, 1131, 1131,    0,    0,    0,    0,    0,
        0, 1131, 1131, 1131, 1131, 1131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132, 1132,
     1132, 1132, 1132,    0,    0,    0,    0,    0,    0, 1132,
     1132, 1132, 1132, 1132,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1132, 1132,
     1132, 1132, 1132, 1132, 1134, 1134, 1134, 1134, 1134, 1134,
     1134,    0,    0,    0,    0,    0,    0, 1134, 1134, 1134,
     1134, 1134,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1134, 1134, 1134, 1134,
     1134, 1134, 1135, 1135, 1135, 1135, 1135, 1135, 1135,    0,
        0,    0,    0,    0,    0, 1135, 1135, 1135, 1135, 1135,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1135, 1135, 1135, 1135, 1135, 1135,
     1137,    0,    0, 1137, 1137, 1137, 1138,    0,    0, 1138,

     1138, 1138, 1140, 1140, 1140, 1140,    0, 1140, 1141,    0,
     1141, 1141, 1141, 1141, 1142, 1142, 1142,    0,    0, 1142,
     1143,    0, 1143, 1143, 1143, 1143, 1144,    0, 1144, 1144,
     1144, 1144, 1145,    0, 1145, 1145, 1145, 1145, 1146, 1146,
     1146, 1146, 1146, 1146, 1147,    0, 1147, 1147, 1147, 1147,
     1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150,
     1150, 1150, 1151, 1151, 1151, 1151, 1151, 1151, 1152, 1152,
     1152, 1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1153,
     1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155,
     1155, 1155, 1156,    0,    0, 1156, 1156, 1156, 1157,    0,

        0, 1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158,
     1160, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161,
     1161, 1161, 1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,
     1163, 1163, 1163, 1163, 1164,    0,    0, 1164, 1164, 1164,
     1165,    0,    0, 1165, 1165, 1165, 1166, 1166, 1166, 1166,
     1166, 1166, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1169,
     1169, 1169, 1169, 1169, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,

     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1136
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[96] =
    {   0,
1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"

#line 16 "lex.l"
#include <string>
#include <cstdio>
#include <iostream>
#include <stack>
#include <vector>

#include "debug.h"
#include "error.h"
#include "flex_bison_common.h"

#include "parser.tab.h"

#include <Trinity/IO/Path.h>
 
using namespace std;
using namespace Trinity::IO;


    //Token capturing facilities{{{
//IssueID #27
#define CLIP_STRING(l,r)                            new string(yytext+l, yyleng-r-l)

string* retrieveVerbatimString()
{
    char       *currentPtr, *endPtr, *cpPtr;
    string     *str = new string();

    currentPtr	=	yytext+2;       //point currentPtr right after first "
    endPtr		=	yytext+yyleng-1;//point endPtr to last "
    cpPtr       =   currentPtr;     //head of the string to be appended

    for(;currentPtr != endPtr; ++currentPtr)
    {
        if(*currentPtr == '"')
        {
            str->append(cpPtr, currentPtr - cpPtr + 1);
            ++currentPtr;
            cpPtr = currentPtr + 1;
        }
    }
    str->append(cpPtr, currentPtr - cpPtr);
    return str;
}

long int retrieveInteger()
{
    return strtol(yytext, NULL, 10);
}

#ifdef LEX_TEST
#define LEX_DEBUG(t)                                wcout<< t <<endl
#define PRINT_TOKEN(t)								printf("TOKEN:\t%s\t;LINE:\t%d\tCOLUMN:\t%d\n",#t, yylineno, yycolumnno)
#define CAPTURE_STRING_ENCLOSED(t)                  PRINT_TOKEN(t); tmp_string = CLIP_STRING(1,1); wcout<<"\t"<<*tmp_string<<endl; delete tmp_string
#define CAPTURE_STRING(t)					        PRINT_TOKEN(t); tmp_string = CLIP_STRING(0,0); wcout<<"\t"<<*tmp_string<<endl; delete tmp_string
#define CAPTURE_STRING_VERBATIM(t)                  PRINT_TOKEN(t); tmp_string = retrieveVerbatimString(); wcout<<*tmp_string<<endl; delete tmp_string
#define CAPTURE_INTEGER(t)                          PRINT_TOKEN(t); printf("\t%d\n", retrieveInteger());
#define CAPTURE_TOKEN(t)                            PRINT_TOKEN(t);

static string									    *tmp_string;
#else
#define LEX_DEBUG(str)                              {}
#define CAPTURE_STRING_ENCLOSED(t)                  yylval.string = CLIP_STRING(1,1); return t
#define CAPTURE_STRING(t)					        yylval.string = CLIP_STRING(0,0); return t
#define CAPTURE_STRING_VERBATIM(t)                  yylval.string = retrieveVerbatimString(); return t
#define CAPTURE_INTEGER(t)                          yylval.integer= retrieveInteger(); return t
#define CAPTURE_TOKEN(t)                            yylval.token = t; return t
#endif

//}}}

static bool lex_nonstop = false;
void set_lex_nonstop_mode(bool nonstop)
{
    ::lex_nonstop = nonstop;
}

#define CAPTURE_COMMENT(comment_token) do                   \
{                                                           \
    if(::lex_nonstop)                                       \
        {CAPTURE_TOKEN(comment_token);}                     \
    else if (comment_token == T_COMMENT_BLOCK_UNCLOSED)     \
    {                                                       \
        error("Unterminated comment:");                     \
        yyterminate();                                      \
    }                                                       \
} while(0)

#define REPORT_UNTERMINATED_STRING do{                      \
    if(::lex_nonstop){                                      \
        CAPTURE_TOKEN(T_STRING_UNCLOSED);                   \
    }                                                       \
    else{                                                   \
        error("Unterminated string:"); yyterminate();       \
    }                                                       \
} while(0) 

/* multi file facilities */
static vector<string*>      filename_stack;
static vector<int>          lineno_stack, colno_stack;//flex & bison don't handle these. On our own.
static string              *current_filename = NULL; 
static vector<string*>      disposed_filenames; // Will be deleted at parser reset

static bool recursive_inclusion(string* filename)
{
    for(auto *str:filename_stack)
    if(*str == *filename) return true;

    if(current_filename != NULL && *filename == *current_filename)
        return true;

    return false;
}

static bool duplicate_inclusion(string* filename)
{
    for(auto *str:disposed_filenames)
    if(*str == *filename) return true;

    return false;
}

void push_new_yy_buffer_state(YY_BUFFER_STATE new_buffer, string* filename, FILE* fp)
{
    if(current_filename != NULL)
    {
        filename_stack.push_back(current_filename);
        lineno_stack.push_back(yylineno);
        colno_stack.push_back(yycolumnno);
    }

    current_filename = filename;
    yylineno = 1;
    yycolumnno = 1;
    if(*filename != "")
    {
        /* If filename == "", then yy_scan_string has already
           done pushing the buffer into the LEX internal stack.
           Otherwise, we just allocated a new FILE* based buffer
           and we have to do it manually here. */
        yypush_buffer_state (new_buffer);
        yyin = fp;//point yyin to new file pointer and we're ready to roll!
    }
}

void push_new_buffer(const char* buffer)
{
    string* filename = new string("");
    FILE* fp = NULL;

    auto text_buffer = yy_scan_string(buffer);
    push_new_yy_buffer_state(text_buffer, filename, fp);
}

// Remove UTF-8 byte order mark(BOM) if found
// The UTF-8 BOM byte sequence is 0xEF, 0xBB, 0xBF
// See https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
// If BOM is not found, the file is seeked to its beginning.
void strip_utf8_bom(FILE* fp)
{
    // !According to http://www.cplusplus.com/reference/cstdio/ungetc/
    // Multiple ungetc cause undefined behavior.
    // Some implementations allow characters to be retrieved in reverse order
    // done in multiple ungetc, but this is not portable behavior.

    if(getc(fp) != 0xEF)goto reset_file;
    if(getc(fp) != 0xBB)goto reset_file;
    if(getc(fp) != 0xBF)goto reset_file;

    return;

    reset_file:
    //BOM not found, reset the file.
    fseek(fp, 0, SEEK_SET);
}

int push_new_file(string *filename)
{
    /* The FILE* fp will be pushed onto
     * FLEX's built-in stack, while
     * filename, lineno, columnno onto
     * our own stacks. Note that, our
     * stacks are not aligned with the
     * FLEX's built-in stack, as the top
     * target (current file) is in the 
     * FLEX's built-in stack, but not in
     * ours. We store the top target as
     * spared parts, ranging from:
     *     string* current_filename
     *     int yylineno
     *     int yycolumnno
     */
    FILE *fp; int error_no;
    /* Normalize the filename */
    *filename = Path::GetFullPath(*filename);
    if(recursive_inclusion(filename))
    {
        error(string("Warning: Recursive inclusion: '")+*filename+"'");
        return 1;//TODO error number
    }
    if(duplicate_inclusion(filename))
    {
        error(string("Warning: Duplicated inclusion: '")+*filename+"'");
        return 2;//TODO error number
    }
    /* Convert UTF-8 filename to UTF-16 */
    auto utf16_filename_arr = Trinity::String(filename->c_str()).ToWcharArray();
    if((error_no = _wfopen_s(&fp, utf16_filename_arr, L"r")) != 0)
    {
        error(string("Could not open input file '") + *filename + "'.");
        return error_no;
    }

    strip_utf8_bom(fp);

    auto new_buffer = yy_create_buffer ( fp, YY_BUF_SIZE ); // this should not fail
    push_new_yy_buffer_state(new_buffer, filename, fp);

    LEX_DEBUG(*current_filename << " is on stack.");
    return 0;
}

extern "C" int yywrap() { 

    bool currentBufferIsString = (*current_filename == "");

    if(!currentBufferIsString)
        fclose(yyin);
    //old yyin will be popped out
    yypop_buffer_state();
    disposed_filenames.push_back(current_filename);
    if(!YY_CURRENT_BUFFER)
    {
        LEX_DEBUG("No more files to parse");
        current_filename = NULL;
        return -1;
    }else
    {
        current_filename = filename_stack.back();
        yylineno = lineno_stack.back();
        yycolumnno = colno_stack.back();

        filename_stack.pop_back();
        lineno_stack.pop_back();
        colno_stack.pop_back();
        LEX_DEBUG("Switching back to file:"<<*current_filename);
        return 0;
    }
}

void reset_filename_stack()
{
    if(current_filename)
        /* there's still something
           on the processing stack,
           we should dispose them first. */
           while(!yywrap())
                ;
    for(string* &strPtr: disposed_filenames)
    {
        LEX_DEBUG("deleting " << *strPtr);
        delete strPtr;
    }
    disposed_filenames.clear();
    yylineno = yycolumnno = 1;
}

/* position tracking facilities */
int yycolumnno = 1;      /* yylineno will be maintained automatically */
void position_tracker()  /*position_tracker will be called upon matching of a token */
{
    /* what do we have here:
     * int yycolumnno TO BE MAINTAINED
     * int yylineno, PROVIDED BY LEX, pointed at the line AFTER CURRENT SYMBOL
     *      * If the tail of the symbol is \r or \n, yylineno will point to the line after current symbol
     * yylloc provided by the parser TO BE MAINTAINED
     * string *current_filename
     * yytext, yyleng: starting pointer of the token buffer, and
     * length.
     */

    //c_ptr: current pointer; e_ptr: end of buffer; l_ptr: the last
    //character of current symbol.
    char* c_ptr = yytext, *e_ptr = yytext + yyleng, *l_ptr = yytext + yyleng - 1;
    int no_of_newline = 0;
    bool last_is_backslash_r = false;
    yylloc.first_line = yylloc.last_line = yylineno;
    yylloc.first_column = yylloc.last_column = yycolumnno;
    yylloc.filename = current_filename;

    /* When symbol tail is \n, after a contained \r, yycolumnno will be
     * reset to 1, and we lose track of the real last column.
     * In that case, we store the real last column in tmp_columnno when 
     * we hit a \r
     * We follow the convention that, for any \r or \n, or \r\n-terminated symbol, we
     * do NOT include the extra new line in the text range of the symbol.
     */
    int tmp_columnno;

    for(;c_ptr != e_ptr;++c_ptr)
    {
        if(c_ptr == l_ptr){
            if(*l_ptr == '\n')
            {
                if(last_is_backslash_r)
                {
                    yylloc.first_line = yylineno - no_of_newline;
                    yylloc.last_line -= 1;
                    yylloc.last_column = tmp_columnno;
                }else
                {
                    yylloc.first_line = yylineno - no_of_newline - 1;
                    yylloc.last_line -= 1;
                    yylloc.last_column = yycolumnno - 1;
                }
            }else if(*l_ptr == '\r')
            {
                yylloc.first_line = yylineno - no_of_newline;
                yylloc.last_column = yycolumnno - 1;
            }else
            {
                yylloc.first_line = yylineno - no_of_newline;
                //capture col before pushing the last char
                yylloc.last_column = yycolumnno;
            }
        }
        switch(*c_ptr)
        {
            case '\r':
                ++no_of_newline; 
                tmp_columnno = yycolumnno;
                yycolumnno = 1;
                last_is_backslash_r = true;
                break;
            case '\n':
                if(!last_is_backslash_r)//otherwise handled by \r
                {
                    ++no_of_newline;
                    yycolumnno = 1;
                }
                last_is_backslash_r = false;
                break;
            default:
                ++yycolumnno;
                last_is_backslash_r = false;
                break;
        }
    }
}
#define YY_USER_ACTION position_tracker();

//free string trigger
bool sticky_WAIT_STRING = false;



/* line number */
/* FSTR_TERM: anything but the forbidden symbols+spaces */
/*
* Allowing " and ' in the middle
*   FSTR_MID            (?:(?:\\.)|[^;,\{\}\[\]\:\"\'])
*/
/* PSTR: String for Array<T>(dim_str), forbids '(' and ')' 
*/
#line 2613 "lex.flex.cpp"

#define INITIAL 0
#define WAIT_STRING 1
#define WAIT_STRING_PAREN 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 390 "lex.l"


    /* Comments */
#line 2798 "lex.flex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1137 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6165 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 393 "lex.l"
CAPTURE_COMMENT(T_COMMENT_BLOCK);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 394 "lex.l"
CAPTURE_COMMENT(T_COMMENT_LINE);
	YY_BREAK
/* for closed comment, the rule below matches
     * to the end of the comment, without */
/* thus, it will be shorter than the closed
     * comment rule (and won't take effect). */
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 399 "lex.l"
CAPTURE_COMMENT(T_COMMENT_BLOCK_UNCLOSED);
	YY_BREAK
/* Strings */
case 4:
YY_RULE_SETUP
#line 402 "lex.l"
{ CAPTURE_STRING_ENCLOSED(T_STRING); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 403 "lex.l"
{ CAPTURE_STRING_ENCLOSED(T_STRING); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 404 "lex.l"
{ CAPTURE_STRING_VERBATIM(T_STRING); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 405 "lex.l"
{
    CAPTURE_STRING(T_STRING);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 408 "lex.l"
{
    CAPTURE_STRING(T_STRING);
}
	YY_BREAK
/* Unclosed strings */
case 9:
YY_RULE_SETUP
#line 413 "lex.l"
REPORT_UNTERMINATED_STRING;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 414 "lex.l"
REPORT_UNTERMINATED_STRING;
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 415 "lex.l"
REPORT_UNTERMINATED_STRING;
	YY_BREAK
/* Values, overridden by WAIT_STRING */
case 12:
YY_RULE_SETUP
#line 419 "lex.l"
{
    CAPTURE_STRING(T_GUIDVALUE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 422 "lex.l"
CAPTURE_INTEGER(T_INTEGER);
	YY_BREAK
/* Tricky keywords and related symbols */
case 14:
YY_RULE_SETUP
#line 425 "lex.l"
{
    BEGIN(WAIT_STRING);
    CAPTURE_TOKEN(T_INCLUDE);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 429 "lex.l"
{
    sticky_WAIT_STRING = true;
    CAPTURE_TOKEN(T_TRINITY_SETTINGS);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 433 "lex.l"
{
    if(sticky_WAIT_STRING)
    {
        LEX_DEBUG("LCurly: wait ON\n");
        BEGIN(WAIT_STRING);
    }
    CAPTURE_TOKEN(T_LCURLY);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 441 "lex.l"
{
    if(sticky_WAIT_STRING)
    {
        LEX_DEBUG("RCurly: wait OFF\n");
        sticky_WAIT_STRING = false;
        BEGIN(INITIAL);
    }
    CAPTURE_TOKEN(T_RCURLY);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 450 "lex.l"
{
    LEX_DEBUG("LSquare: wait ON\n");
    sticky_WAIT_STRING = true;
    BEGIN(WAIT_STRING);
    CAPTURE_TOKEN(T_LSQUARE);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 456 "lex.l"
{
    LEX_DEBUG("RSquare: wait OFF\n");
    sticky_WAIT_STRING = false;
    BEGIN(INITIAL);
    CAPTURE_TOKEN(T_RSQUARE);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 462 "lex.l"
{
    LEX_DEBUG("LParen: wait ON\n");
    BEGIN(WAIT_STRING_PAREN);
    CAPTURE_TOKEN(T_LPAREN);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 467 "lex.l"
{
    LEX_DEBUG("RParen: wait OFF\n");
    BEGIN(INITIAL);
    CAPTURE_TOKEN(T_RPAREN);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 472 "lex.l"
{
    if(!sticky_WAIT_STRING)
    {
        LEX_DEBUG("Semicolon: wait OFF");
        BEGIN(INITIAL);
    }
    CAPTURE_TOKEN(T_SEMICOLON);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 480 "lex.l"
CAPTURE_TOKEN(T_COMMA);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 481 "lex.l"
CAPTURE_TOKEN(T_COLON);
	YY_BREAK
/* Non-tricky keywords and symbols*/
/* Macro (Yes we have that!) */
case 25:
YY_RULE_SETUP
#line 486 "lex.l"
CAPTURE_TOKEN(T_EQUAL);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 487 "lex.l"
CAPTURE_TOKEN(T_SHARP);
	YY_BREAK
/* Structures */
case 27:
YY_RULE_SETUP
#line 490 "lex.l"
CAPTURE_TOKEN(T_STRUCT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 491 "lex.l"
CAPTURE_TOKEN(T_STRUCT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 492 "lex.l"
CAPTURE_TOKEN(T_CELL);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 493 "lex.l"
CAPTURE_TOKEN(T_CELL);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 494 "lex.l"
CAPTURE_TOKEN(T_PROTOCOL);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 495 "lex.l"
CAPTURE_TOKEN(T_PROTOCOL);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 496 "lex.l"
CAPTURE_TOKEN(T_SERVER);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 497 "lex.l"
CAPTURE_TOKEN(T_SERVER);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 498 "lex.l"
CAPTURE_TOKEN(T_PROXY);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 499 "lex.l"
CAPTURE_TOKEN(T_PROXY);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 500 "lex.l"
CAPTURE_TOKEN(T_MODULE);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 501 "lex.l"
CAPTURE_TOKEN(T_MODULE);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 502 "lex.l"
CAPTURE_TOKEN(T_ENUM);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 503 "lex.l"
CAPTURE_TOKEN(T_ENUM);
	YY_BREAK
/* Field modifiers */
case 41:
YY_RULE_SETUP
#line 506 "lex.l"
CAPTURE_TOKEN(T_OPTIONALMODIFIER);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 507 "lex.l"
CAPTURE_TOKEN(T_OPTIONALMODIFIER);
	YY_BREAK
/* Protocol related */
case 43:
YY_RULE_SETUP
#line 510 "lex.l"
CAPTURE_TOKEN(T_TYPE);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 511 "lex.l"
CAPTURE_TOKEN(T_TYPE);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 512 "lex.l"
CAPTURE_TOKEN(T_SYNCRPC);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 513 "lex.l"
CAPTURE_TOKEN(T_SYNCRPC);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 514 "lex.l"
CAPTURE_TOKEN(T_ASYNCRPC);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 515 "lex.l"
CAPTURE_TOKEN(T_ASYNCRPC);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 516 "lex.l"
CAPTURE_TOKEN(T_HTTP);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 517 "lex.l"
CAPTURE_TOKEN(T_HTTP);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 518 "lex.l"
CAPTURE_TOKEN(T_HTTP);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 519 "lex.l"
CAPTURE_TOKEN(T_REQUEST);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 520 "lex.l"
CAPTURE_TOKEN(T_REQUEST);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 521 "lex.l"
CAPTURE_TOKEN(T_RESPONSE);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 522 "lex.l"
CAPTURE_TOKEN(T_RESPONSE);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 523 "lex.l"
CAPTURE_TOKEN(T_STREAM);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 524 "lex.l"
CAPTURE_TOKEN(T_STREAM);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 525 "lex.l"
CAPTURE_TOKEN(T_VOID);
	YY_BREAK
/* Built-in atom data types */
case 59:
YY_RULE_SETUP
#line 528 "lex.l"
CAPTURE_TOKEN(T_BYTETYPE);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 529 "lex.l"
CAPTURE_TOKEN(T_SBYTETYPE);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 530 "lex.l"
CAPTURE_TOKEN(T_BOOLTYPE);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 531 "lex.l"
CAPTURE_TOKEN(T_CHARTYPE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 532 "lex.l"
CAPTURE_TOKEN(T_SHORTTYPE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 533 "lex.l"
CAPTURE_TOKEN(T_USHORTTYPE);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 534 "lex.l"
CAPTURE_TOKEN(T_INTTYPE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 535 "lex.l"
CAPTURE_TOKEN(T_UINTTYPE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 536 "lex.l"
CAPTURE_TOKEN(T_LONGTYPE);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 537 "lex.l"
CAPTURE_TOKEN(T_ULONGTYPE);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 538 "lex.l"
CAPTURE_TOKEN(T_FLOATTYPE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 539 "lex.l"
CAPTURE_TOKEN(T_DOUBLETYPE);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 540 "lex.l"
CAPTURE_TOKEN(T_DECIMALTYPE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 541 "lex.l"
CAPTURE_TOKEN(T_DATETIMETYPE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 542 "lex.l"
CAPTURE_TOKEN(T_GUIDTYPE);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 543 "lex.l"
CAPTURE_TOKEN(T_U8STRINGTYPE);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 544 "lex.l"
CAPTURE_TOKEN(T_STRINGTYPE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 545 "lex.l"
CAPTURE_TOKEN(T_STRINGTYPE);
	YY_BREAK
/* Aliases for CellID type, will be converted to long(int64) */
case 77:
YY_RULE_SETUP
#line 548 "lex.l"
CAPTURE_TOKEN(T_LONGTYPE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 549 "lex.l"
CAPTURE_TOKEN(T_LONGTYPE);
	YY_BREAK
/* Aliases for atom data types */
case 79:
YY_RULE_SETUP
#line 552 "lex.l"
CAPTURE_TOKEN(T_BYTETYPE);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 553 "lex.l"
CAPTURE_TOKEN(T_SBYTETYPE);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 554 "lex.l"
CAPTURE_TOKEN(T_USHORTTYPE);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 555 "lex.l"
CAPTURE_TOKEN(T_SHORTTYPE);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 556 "lex.l"
CAPTURE_TOKEN(T_UINTTYPE);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 557 "lex.l"
CAPTURE_TOKEN(T_INTTYPE);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 558 "lex.l"
CAPTURE_TOKEN(T_ULONGTYPE);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 559 "lex.l"
CAPTURE_TOKEN(T_LONGTYPE);
	YY_BREAK
/* Built-in container data types*/
case 87:
YY_RULE_SETUP
#line 562 "lex.l"
CAPTURE_TOKEN(T_LANGLE);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 563 "lex.l"
CAPTURE_TOKEN(T_RANGLE);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 564 "lex.l"
CAPTURE_TOKEN(T_LISTTYPE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 565 "lex.l"
CAPTURE_TOKEN(T_ARRAYTYPE);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 566 "lex.l"
CAPTURE_TOKEN(T_ARRAYTYPE);
	YY_BREAK
/* Identifiers. Overridden by keywords and free-style strings.*/
case 92:
YY_RULE_SETUP
#line 570 "lex.l"
CAPTURE_STRING(T_IDENTIFIER);
	YY_BREAK
/* Spaces, which will be overridden when matching free-style strings.*/
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 572 "lex.l"
;
	YY_BREAK
/* Anything else triggers an error */
case 94:
YY_RULE_SETUP
#line 574 "lex.l"
{
    if(!::lex_nonstop)
    {
        error("Unrecognized input sequence:"); yyterminate();
    }
}
	YY_BREAK
/* Deprecated stuff {{{
        Non-supported containers
"Set"                                               CAPTURE_TOKEN(T_SETTYPE);
"Dictionary"                                        CAPTURE_TOKEN(T_DICTIONARYTYPE);

"index"                                             CAPTURE_TOKEN(T_INDEX);
"Index"                                             CAPTURE_TOKEN(T_INDEX);

        Non-supported modifiers
"invisible"                                         CAPTURE_TOKEN(T_INVISIBLEMODIFIER);
"Invisible"                                         CAPTURE_TOKEN(T_INVISIBLEMODIFIER);
"Extern"                                            CAPTURE_TOKEN(T_EXTERNMODIFIER);
"extern"                                            CAPTURE_TOKEN(T_EXTERNMODIFIER);

         * "Fixed"                                             CAPTURE_TOKEN(T_FIXEDMODIFIER);
         * "fixed"                                             CAPTURE_TOKEN(T_FIXEDMODIFIER);
         * "Elastic"                                           CAPTURE_TOKEN(T_ELASTICMODIFIER);
         * "elastic"                                           CAPTURE_TOKEN(T_ELASTICMODIFIER);
         * "\n"                                                CAPTURE_TOKEN(T_LF);
         * "<-"                                                CAPTURE_TOKEN(T_MAPSYMBOL);
         * "Using"                                             CAPTURE_TOKEN(T_USING);
         * "using"                                             CAPTURE_TOKEN(T_USING);
         * "EntityList"                                        CAPTURE_TOKEN(T_ENTITYLIST);
         * "DataSource"                                        CAPTURE_TOKEN(T_DATASOURCE);
         * "RelationalTable"                                   CAPTURE_TOKEN(T_RELATIONALTABLE);
         * "PartitionBy"                                       CAPTURE_TOKEN(T_PARTITIONBY);
         * "SpecFile"                                          CAPTURE_TOKEN(T_SPECFILE);
         * "Entities"                                          CAPTURE_TOKEN(T_ENTITIES);
         * "ConnectionString"                                  CAPTURE_TOKEN(T_CONNECTIONSTRING);
         * "SqlServer"                                         CAPTURE_TOKEN(T_SQLSERVER);
         * "SQLServer"                                         CAPTURE_TOKEN(T_SQLSERVER);
         * "PrimaryKey"                                        CAPTURE_TOKEN(T_PRIMARYKEY);
         * "ReferencedCell"                                    CAPTURE_TOKEN(T_REFERENCEDCELL);
         * "Column"                                            CAPTURE_TOKEN(T_COLUMN);
         * "association"                                       CAPTURE_TOKEN(T_ASSOCIATION);
         * "Association"                                       CAPTURE_TOKEN(T_ASSOCIATION);
         * "RunningMode"                                       CAPTURE_TOKEN(T_RUNNINGMODE);
         * "Embedded"                                          CAPTURE_TOKEN(T_EMBEDDED);
         * "Distributed"                                       CAPTURE_TOKEN(T_DISTRIBUTED);
         * "IndexServerConnectionString"                       CAPTURE_TOKEN(T_INDEXCONNSTRING);
         * "IndexConnString"                                   CAPTURE_TOKEN(T_INDEXCONNSTRING);
         * "TQL"                                               CAPTURE_TOKEN(T_TQL);
         * "OFF"                                               CAPTURE_TOKEN(T_OFF);
         * "Off"                                               CAPTURE_TOKEN(T_OFF);
         * "ON"                                                CAPTURE_TOKEN(T_ON);
         * "On"                                                CAPTURE_TOKEN(T_ON);
         * "RDF"                                               CAPTURE_TOKEN(T_RDF);
         * "Freebase"                                          CAPTURE_TOKEN(T_FREEBASE);
         * "TSLProfile"                                        CAPTURE_TOKEN(T_TSLPROFILE);
         * "TrinityMM"                                         CAPTURE_TOKEN(T_TRINITYMM);
         * "ExtensionSuffixChar"                               CAPTURE_TOKEN(T_EXTENSIONSUFFIXCHAR);
         * "namespace"                                         CAPTURE_TOKEN(T_NAMESPACE);
         * 
         * Layout could also be dealt as a key-value pair.
         * 
         * "Layout"                                            CAPTURE_TOKEN(T_LAYOUT);
         * "Sequential"                                        CAPTURE_TOKEN(T_SEQ_LAYOUT);
         * "Auto"                                              CAPTURE_TOKEN(T_AUTO_LAYOUT);
         * 
         * Don't know what is dot for.
         * 
         * "."                                                 CAPTURE_TOKEN(T_DOT); 
         * 
         }}}*/
case 95:
YY_RULE_SETUP
#line 646 "lex.l"
ECHO;
	YY_BREAK
#line 3514 "lex.flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(WAIT_STRING):
case YY_STATE_EOF(WAIT_STRING_PAREN):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1137 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1137 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1136);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 645 "lex.l"



#ifdef LEX_TEST
int main()
{
    FILE *fp;
    if(0 != fopen_s(&fp, "test.tsl","r"))
    {
        printf("Could not open the test file.\n");
        return -1;
    }
    yyin = fp;
    yylex();
    return 0;
}
#endif

